import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as u,c as d,b as n,d as s,e as o,w as a,a as i}from"./app-Vmq6mLip.js";const k={},b=i(`<h1 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h1><h2 id="intall-tinycrud" tabindex="-1"><a class="header-anchor" href="#intall-tinycrud" aria-hidden="true">#</a> Intall TinyCRUD</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> tiny-crud
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="create-issue" tabindex="-1"><a class="header-anchor" href="#create-issue" aria-hidden="true">#</a> Create Issue</h2><p>Login Gitee/Github/Gitlab, choose a suitable project, create an issue to store data.</p><h2 id="create-request" tabindex="-1"><a class="header-anchor" href="#create-request" aria-hidden="true">#</a> Create Request</h2><h3 id="prepare-access-token" tabindex="-1"><a class="header-anchor" href="#prepare-access-token" aria-hidden="true">#</a> Prepare Access Token</h3>`,7),h={href:"https://www.google.com/search?q=Gitee+Person+Access+Token",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.google.com/search?q=Github+Person+Access+Token",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.google.com/search?q=Gitlab+Person+Access+Token",target:"_blank",rel:"noopener noreferrer"},g=n("h3",{id:"create-request-instance",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#create-request-instance","aria-hidden":"true"},"#"),s(" Create Request Instance")],-1),f=n("p",null,"If you are in Node/Web environment, you can use the following code to create a request:",-1),y=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(" axios "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"axios"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" createRequest "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"tiny-crud"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" githubRequest "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createRequest"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
    httpLib`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"axios"'),n("span",{class:"token punctuation"},","),s(`
    httpClient`),n("span",{class:"token operator"},":"),s(" axios"),n("span",{class:"token punctuation"},","),s(`
    accessToken`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Your Personal Access Token"'),n("span",{class:"token punctuation"},","),s(`

    platform`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"github"'),n("span",{class:"token punctuation"},","),s(`
    owner`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Your Owner"'),n("span",{class:"token punctuation"},","),s(`
    repo`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Your Repo"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(" axios "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"axios"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" createRequest "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"tiny-crud"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" giteeRequest "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createRequest"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
    httpLib`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"axios"'),n("span",{class:"token punctuation"},","),s(`
    httpClient`),n("span",{class:"token operator"},":"),s(" axios"),n("span",{class:"token punctuation"},","),s(`
    accessToken`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Your Personal Access Token"'),n("span",{class:"token punctuation"},","),s(`

    platform`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"gitee"'),n("span",{class:"token punctuation"},","),s(`
    owner`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Your Owner"'),n("span",{class:"token punctuation"},","),s(`
    repo`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Your Repo"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(" axios "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"axios"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" createRequest "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"tiny-crud"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" gitlabRequest "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createRequest"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
    httpLib`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"axios"'),n("span",{class:"token punctuation"},","),s(`
    httpClient`),n("span",{class:"token operator"},":"),s(" axios"),n("span",{class:"token punctuation"},","),s(`
    accessToken`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Your Personal Access Token"'),n("span",{class:"token punctuation"},","),s(`

    platform`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"gitlab"'),n("span",{class:"token punctuation"},","),s(`
    projectId`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Your Project ID"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=i(`<div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Install Axios to create request in Web/Node environment</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i axios
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><p>If you are in Wechat Mini Program environment, you can use the following code to create a request:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tiny-crud&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> githubRequest <span class="token operator">=</span> <span class="token function">createRequest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    httpLib<span class="token operator">:</span> <span class="token string">&quot;wx&quot;</span><span class="token punctuation">,</span>
    httpClient<span class="token operator">:</span> wx<span class="token punctuation">,</span>
    accessToken<span class="token operator">:</span> <span class="token string">&quot;Your Personal Access Token&quot;</span><span class="token punctuation">,</span>

    platform<span class="token operator">:</span> <span class="token string">&quot;github&quot;</span><span class="token punctuation">,</span>
    owner<span class="token operator">:</span> <span class="token string">&quot;Your Owner&quot;</span><span class="token punctuation">,</span>
    repo<span class="token operator">:</span> <span class="token string">&quot;Your Repo&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, the request instance will use official API to peform CRUD operations. If you want to use your own API, you can use the following code to create a request:</p>`,4),x=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{ts:"",class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" githubRequest "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createRequest"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
    httpLib`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"axios"'),n("span",{class:"token punctuation"},","),s(`
    httpClient`),n("span",{class:"token operator"},":"),s(" axios"),n("span",{class:"token punctuation"},","),s(`
    accessToken`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Your Personal Access Token"'),n("span",{class:"token punctuation"},","),s(`

    platform`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"github"'),n("span",{class:"token punctuation"},","),s(`
    owner`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Your Owner"'),n("span",{class:"token punctuation"},","),s(`
    repo`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"Your Repo"'),n("span",{class:"token punctuation"},","),s(`
    baseURL`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"https://your-github-api.com"'),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=i(`<p>TinyCRUD will use the following API to perform CRUD operations:</p><table><thead><tr><th>Platform</th><th>API</th></tr></thead><tbody><tr><td>Gitee</td><td><code>https://gitee.com</code></td></tr><tr><td>Gitlab</td><td><code>https://gitlab.com</code></td></tr><tr><td>Github</td><td><code>https://api.github.com</code></td></tr></tbody></table><h2 id="verify-authorization" tabindex="-1"><a class="header-anchor" href="#verify-authorization" aria-hidden="true">#</a> Verify Authorization</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>githubRequest<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function A(T,P){const c=l("ExternalLinkIcon"),p=l("CodeTabs");return u(),d("div",null,[b,n("p",null,[n("a",h,[s("Gitee Person Access Token"),o(c)])]),n("p",null,[n("a",m,[s("Github Person Access Token"),o(c)])]),n("p",null,[n("a",v,[s("Gitlab Person Access Token"),o(c)])]),g,f,o(p,{id:"34",data:[{id:"github"},{id:"gitee"},{id:"gitlab"}]},{title0:a(({value:e,isActive:t})=>[s("github")]),title1:a(({value:e,isActive:t})=>[s("gitee")]),title2:a(({value:e,isActive:t})=>[s("gitlab")]),tab0:a(({value:e,isActive:t})=>[y]),tab1:a(({value:e,isActive:t})=>[w]),tab2:a(({value:e,isActive:t})=>[_]),_:1}),q,x,R])}const Y=r(k,[["render",A],["__file","start.html.vue"]]);export{Y as default};
