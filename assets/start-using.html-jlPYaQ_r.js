import{_ as u}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as r,c as d,e as i,w as a,a as p,d as s,b as n}from"./app-FRABKYep.js";const k={},m=p(`<h1 id="start-using" tabindex="-1"><a class="header-anchor" href="#start-using" aria-hidden="true">#</a> Start Using</h1><h2 id="create-data-model" tabindex="-1"><a class="header-anchor" href="#create-data-model" aria-hidden="true">#</a> Create Data Model</h2><p>We are using a simple user model as an example to create a UserModel. A user has properties such as name, age, and gender.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BaseModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tiny-crud&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UserModel</span> <span class="token keyword">extends</span> <span class="token class-name">BaseModel</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Data models that inherit from BaseModel will automatically have four fields: id, created_at, updated_at, and created_by. The content of these four fields will be automatically brought out from the corresponding data in the storage.</p></div><h2 id="create-data-repository" tabindex="-1"><a class="header-anchor" href="#create-data-repository" aria-hidden="true">#</a> Create Data Repository</h2><p>Create a UserRepository that inherits from GithubRepository and pass the generic parameter as the UserModel defined above.</p>`,7),v=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" GithubRepository "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"tiny-crud"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" githubRequest "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"./github-request"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserRepository"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},[s("GithubRepository"),n("span",{class:"token operator"},"<"),s("UserModel"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"("),s("githubRequest"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Your Issue Number"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" GiteeRepository "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"tiny-crud"'),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" githubRequest "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"./github-request"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserRepository"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},[s("GiteeRepository"),n("span",{class:"token operator"},"<"),s("UserModel"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"("),s("githubRequest"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Your Issue Number"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" GitlabRepository "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},'"tiny-crud"'),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserRepository"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},[s("GitlabRepository"),n("span",{class:"token operator"},"<"),s("UserModel"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"super"),n("span",{class:"token punctuation"},"("),s("GithubRequest"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Your Issue Number"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=p(`<div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The second parameter of the constructor is the issue number of the repository, which is used to specify the issue for storing data.If you don&#39;t pass in this parameter, the issue number carried by the object of the first parameter you passed in will be used by default.</p></div><p>You can use the usual way to create a repository object, like this:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> userRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can also use SingletonFactory to create a singleton object:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> SingletonFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tiny-crud&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> userRepository <span class="token operator">=</span> SingletonFactory<span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span>UserRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The data repository provides some basic CRUD methods, of course, you can also extend it further, for example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> GithubRepository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tiny-crud&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">GithubRepository<span class="token operator">&lt;</span>UserModel<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>GithubRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token function">findByName</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>UserModel<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>name <span class="token operator">===</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crud-methods" tabindex="-1"><a class="header-anchor" href="#crud-methods" aria-hidden="true">#</a> CRUD Methods</h2><h3 id="detail" tabindex="-1"><a class="header-anchor" href="#detail" aria-hidden="true">#</a> detail</h3><p>Get the details of the data entry.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>userRepository<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The return value is an object, which contains the following fields:</p><table><thead><tr><th>field name</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>id</td><td>number</td><td>Issue Id</td></tr><tr><td>issue_number</td><td>string</td><td>Issue Number</td></tr><tr><td>comments</td><td>number</td><td>Issue Comments</td></tr><tr><td>created_at</td><td>string</td><td>Issue Created Time</td></tr><tr><td>updated_at</td><td>string</td><td>Issue Updated Time</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>For Github or Gitlab, the comments field displays the actual number, for Gitee, the comments field displays the cumulative number.</p><p>For example: Add 10 data and then delete them all. For Github or Gitlab, the comments field displays 0, for Gitee, the comments field displays 10.</p></div><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create" aria-hidden="true">#</a> create</h3><p>Create a new data entry.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>userRepository<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createall" tabindex="-1"><a class="header-anchor" href="#createall" aria-hidden="true">#</a> createAll</h3><p>Create multiple data entries.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>userRepository<span class="token punctuation">.</span><span class="token function">createAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
        age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
        gender<span class="token operator">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span>
        age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
        gender<span class="token operator">:</span> <span class="token string">&quot;female&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find</h3><p>Find all data entries.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>find method supports one or more parameters, you can pass in a parameter to filter the data, for example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>userRepository
    <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        since<span class="token operator">:</span> <span class="token string">&quot;2021-01-01T00:00:00Z&quot;</span><span class="token punctuation">,</span>
        per_page<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        page<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The query parameters supported by the find method depending on the storage platform you are using:</p>`,26),g=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"field name"),n("th",null,"type"),n("th",null,"description")])]),n("tbody",null,[n("tr",null,[n("td",null,"since"),n("td",null,"string"),n("td",null,[s("Only data updated after a given time is returned，format is ISO 8601 "),n("code",null,"YYYY-MM-DDTHH:MM:SSZ")])]),n("tr",null,[n("td",null,"page"),n("td",null,"number"),n("td",null,"Returns the page of data，default 1")]),n("tr",null,[n("td",null,"per_page"),n("td",null,"number"),n("td",null,"The number of data items returned per page，default 30，max 100")])])],-1),f=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"field name"),n("th",null,"type"),n("th",null,"description")])]),n("tbody",null,[n("tr",null,[n("td",null,"sort"),n("td",null,"string"),n("td",null,"Sort order:asc，desc（default）")]),n("tr",null,[n("td",null,"order_by"),n("td",null,"string"),n("td",null,"Returns data sorted by the created_at or updated_at field, which defaults to created_at")])])],-1),w=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"field name"),n("th",null,"type"),n("th",null,"description")])]),n("tbody",null,[n("tr",null,[n("td",null,"since"),n("td",null,"string"),n("td",null,[s("Only data updated after a given time is returned，format is ISO 8601 "),n("code",null,"YYYY-MM-DDTHH:MM:SSZ")])]),n("tr",null,[n("td",null,"page"),n("td",null,"number"),n("td",null,"Current page number")]),n("tr",null,[n("td",null,"per_page"),n("td",null,"number"),n("td",null,"Number per page，default 20，max 100")]),n("tr",null,[n("td",null,"order"),n("td",null,"string"),n("td",null,"Sort order: asc（default），desc")])])],-1),x=p(`<h3 id="findbyid" tabindex="-1"><a class="header-anchor" href="#findbyid" aria-hidden="true">#</a> findById</h3><p>Find a data entry by id.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="updatebyid" tabindex="-1"><a class="header-anchor" href="#updatebyid" aria-hidden="true">#</a> updateById</h3><p>Update a data entry by id.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>userRepository<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span> <span class="token string">&quot;female&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deletebyid" tabindex="-1"><a class="header-anchor" href="#deletebyid" aria-hidden="true">#</a> deleteById</h3><p>Delete a data entry by id.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="deleteall" tabindex="-1"><a class="header-anchor" href="#deleteall" aria-hidden="true">#</a> deleteAll</h3><div class="hint-container caution"><p class="hint-container-title">Caution</p><p>This method will delete all data entries in the issue and cannot be restored.please use with caution.</p></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>userRepository<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12);function _(R,q){const l=o("CodeTabs"),c=o("Tabs");return r(),d("div",null,[m,i(l,{id:"22",data:[{id:"github"},{id:"gitee"},{id:"gitlab"}]},{title0:a(({value:t,isActive:e})=>[s("github")]),title1:a(({value:t,isActive:e})=>[s("gitee")]),title2:a(({value:t,isActive:e})=>[s("gitlab")]),tab0:a(({value:t,isActive:e})=>[v]),tab1:a(({value:t,isActive:e})=>[b]),tab2:a(({value:t,isActive:e})=>[h]),_:1}),y,i(c,{id:"173",data:[{id:"github"},{id:"gitlab"},{id:"gitee"}]},{title0:a(({value:t,isActive:e})=>[s("github")]),title1:a(({value:t,isActive:e})=>[s("gitlab")]),title2:a(({value:t,isActive:e})=>[s("gitee")]),tab0:a(({value:t,isActive:e})=>[g]),tab1:a(({value:t,isActive:e})=>[f]),tab2:a(({value:t,isActive:e})=>[w]),_:1}),x])}const T=u(k,[["render",_],["__file","start-using.html.vue"]]);export{T as default};
