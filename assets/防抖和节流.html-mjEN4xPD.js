import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as d,c as e,a as r}from"./app-1nQ_6I55.js";const a={},h=r('<h1 id="防抖和节流" tabindex="-1"><a class="header-anchor" href="#防抖和节流" aria-hidden="true">#</a> 防抖和节流</h1><h2 id="防抖-vs-节流" tabindex="-1"><a class="header-anchor" href="#防抖-vs-节流" aria-hidden="true">#</a> 防抖 VS 节流</h2><table border="1"><tr><th>特性</th><th>防抖</th><th>节流</th></tr><tr><td>原理</td><td>在事件触发后，等待一定的延迟时间。如果在此时间内再次触发了事件，则重新开始计时。</td><td>在一定时间间隔内只允许函数执行一次。</td></tr><tr><td>关注点</td><td>停止触发后的执行</td><td>在活动期间有规律的执行</td></tr><tr><td>使用场景</td><td>适用于连续事件只需在最后一次触发时响应的场景，如输入框自动完成。</td><td>适用于限制函数执行频率的场景，如滚动事件、窗口调整大小等。</td></tr><tr><td>效果</td><td>只有在事件停止触发后的一定时间内没有再次触发事件时，函数才会执行。</td><td>即使事件频繁触发，函数也只会按照设定的时间间隔执行。</td></tr></table>',3),c=[h];function o(_,s){return d(),e("div",null,c)}const l=t(a,[["render",o],["__file","防抖和节流.html.vue"]]);export{l as default};
