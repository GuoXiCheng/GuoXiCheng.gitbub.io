const t=JSON.parse(`{"key":"v-038e6cdb","path":"/design-pattern/structural/decorator.html","title":"装饰模式","lang":"zh-CN","frontmatter":{"description":"核心思想 装饰模式允许动态的向一个对象添加额外的功能，而不改变其结构。 典型用例 数据流增强 在处理数据流时，如读写文件或网络数据流，装饰模式可以用来动态地添加额外的功能，例如数据压缩、加密、编码转换等。 在这个例子中，具体装饰者类分别添加了加密和压缩的功能，可以灵活的组合装饰者以提供不同的功能组合。","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/design-pattern/structural/decorator.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"装饰模式"}],["meta",{"property":"og:description","content":"核心思想 装饰模式允许动态的向一个对象添加额外的功能，而不改变其结构。 典型用例 数据流增强 在处理数据流时，如读写文件或网络数据流，装饰模式可以用来动态地添加额外的功能，例如数据压缩、加密、编码转换等。 在这个例子中，具体装饰者类分别添加了加密和压缩的功能，可以灵活的组合装饰者以提供不同的功能组合。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-20T06:42:37.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-20T06:42:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"装饰模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-20T06:42:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"核心思想","slug":"核心思想","link":"#核心思想","children":[]},{"level":2,"title":"典型用例","slug":"典型用例","link":"#典型用例","children":[{"level":3,"title":"数据流增强","slug":"数据流增强","link":"#数据流增强","children":[]}]}],"git":{"createdTime":1698031396000,"updatedTime":1700462557000},"readingTime":{"minutes":0.5,"words":151},"filePathRelative":"design-pattern/structural/decorator.md","localizedDate":"2023年10月23日","autoDesc":true}`);export{t as data};
