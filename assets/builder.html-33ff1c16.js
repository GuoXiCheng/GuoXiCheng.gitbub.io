const e=JSON.parse(`{"key":"v-c3ab4124","path":"/design-pattern/creational/builder.html","title":"建造者模式","lang":"zh-CN","frontmatter":{"order":3,"description":"核心思想 建造者模式允许逐步构建复杂对象。 典型用例 文本构建 在需要动态构建复杂的SQL查询或其他任何形式的文本时，可以使用建造者模式来逐步构建文本的不同部分。 在这个例子中，建造者的实现类提供了一系列方法来构建 SQL 查询的不同部分。这些方法返回建造者对象本身，从而允许链式调用。通过这种方式，你可以清晰且灵活地构建出复杂的 SQL 查询或其他形式...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/design-pattern/creational/builder.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"建造者模式"}],["meta",{"property":"og:description","content":"核心思想 建造者模式允许逐步构建复杂对象。 典型用例 文本构建 在需要动态构建复杂的SQL查询或其他任何形式的文本时，可以使用建造者模式来逐步构建文本的不同部分。 在这个例子中，建造者的实现类提供了一系列方法来构建 SQL 查询的不同部分。这些方法返回建造者对象本身，从而允许链式调用。通过这种方式，你可以清晰且灵活地构建出复杂的 SQL 查询或其他形式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-20T06:42:37.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-20T06:42:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"建造者模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-20T06:42:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"核心思想","slug":"核心思想","link":"#核心思想","children":[]},{"level":2,"title":"典型用例","slug":"典型用例","link":"#典型用例","children":[{"level":3,"title":"文本构建","slug":"文本构建","link":"#文本构建","children":[]}]}],"git":{"createdTime":1699169327000,"updatedTime":1700462557000},"readingTime":{"minutes":0.69,"words":206},"filePathRelative":"design-pattern/creational/builder.md","localizedDate":"2023年11月5日","autoDesc":true}`);export{e as data};
