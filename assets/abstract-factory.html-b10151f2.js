const t=JSON.parse('{"key":"v-41a2d2ec","path":"/design-pattern/creational/abstract-factory.html","title":"抽象工厂模式","lang":"zh-CN","frontmatter":{"order":2,"description":"核心思想 抽象工厂模式提供一个创建一系列相关对象的接口，而无需指定具体的类。 典型用例 切换环境 抽象工厂模式可以用来切换不同的环境而无需修改客户端代码，例如：在测试环境中，使用模拟对象；而在生产环境中，使用实际对象。 ```ts // npm run code src/code/design-pattern/abstract-factory/swit...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/design-pattern/creational/abstract-factory.html"}],["meta",{"property":"og:site_name","content":"Guo\'s Page"}],["meta",{"property":"og:title","content":"抽象工厂模式"}],["meta",{"property":"og:description","content":"核心思想 抽象工厂模式提供一个创建一系列相关对象的接口，而无需指定具体的类。 典型用例 切换环境 抽象工厂模式可以用来切换不同的环境而无需修改客户端代码，例如：在测试环境中，使用模拟对象；而在生产环境中，使用实际对象。 ```ts // npm run code src/code/design-pattern/abstract-factory/swit..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-20T06:42:37.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-20T06:42:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"抽象工厂模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-20T06:42:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"核心思想","slug":"核心思想","link":"#核心思想","children":[]},{"level":2,"title":"典型用例","slug":"典型用例","link":"#典型用例","children":[{"level":3,"title":"切换环境","slug":"切换环境","link":"#切换环境","children":[]}]}],"git":{"createdTime":1699169327000,"updatedTime":1700462557000},"readingTime":{"minutes":0.4,"words":119},"filePathRelative":"design-pattern/creational/abstract-factory.md","localizedDate":"2023年11月5日","autoDesc":true}');export{t as data};
