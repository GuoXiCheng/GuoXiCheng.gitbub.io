const e=JSON.parse(`{"key":"v-d5fe0c96","path":"/design-pattern/","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","index":false,"icon":"compass-drafting","description":"创建型设计模式 模式 核心思想 工厂方法模式 提供一个创建对象的接口，让这个接口的实现来决定实例化哪个类 抽象工厂模式 提供一个创建一系列相关对象的接口，而无需指定具体的类 建造者模式 将创建复杂对象的过程分步骤进行，允许使用相同的创建代码生成不同的对象 原型模式 通过复制已有实例来生成新实例，而无需依赖它们所属的类 单例模式 保证一个类只有一个实例，...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/design-pattern/"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"创建型设计模式 模式 核心思想 工厂方法模式 提供一个创建对象的接口，让这个接口的实现来决定实例化哪个类 抽象工厂模式 提供一个创建一系列相关对象的接口，而无需指定具体的类 建造者模式 将创建复杂对象的过程分步骤进行，允许使用相同的创建代码生成不同的对象 原型模式 通过复制已有实例来生成新实例，而无需依赖它们所属的类 单例模式 保证一个类只有一个实例，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-11T14:47:28.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-11T14:47:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-11T14:47:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"创建型设计模式","slug":"创建型设计模式","link":"#创建型设计模式","children":[]},{"level":2,"title":"结构型设计模式","slug":"结构型设计模式","link":"#结构型设计模式","children":[]},{"level":2,"title":"行为模式","slug":"行为模式","link":"#行为模式","children":[]}],"git":{"createdTime":1697638485000,"updatedTime":1699714048000},"readingTime":{"minutes":3.12,"words":937},"filePathRelative":"design-pattern/README.md","localizedDate":"2023年10月18日","autoDesc":true}`);export{e as data};
