import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c as r,b as e}from"./app-c9770ab2.js";const a={},h=e('<h2 id="创建型设计模式" tabindex="-1"><a class="header-anchor" href="#创建型设计模式" aria-hidden="true">#</a> 创建型设计模式</h2><table><tr><th>模式</th><th>核心思想</th></tr><tr><td>工厂方法模式</td><td>提供一个创建对象的接口，让这个接口的实现来决定实例化哪个类</td></tr><tr><td>抽象工厂模式</td><td>提供一个创建一系列相关对象的接口，而无需指定具体的类</td></tr><tr><td>生成器模式</td><td>将创建复杂对象的过程分步骤进行，允许使用相同的创建代码生成不同的对象</td></tr><tr><td>原型模式</td><td>通过复制已有实例来生成新实例，而无需依赖它们所属的类</td></tr><tr><td>单例模式</td><td>保证一个类只有一个实例，并提供一个访问该实例的全局节点</td></tr></table><h2 id="结构型设计模式" tabindex="-1"><a class="header-anchor" href="#结构型设计模式" aria-hidden="true">#</a> 结构型设计模式</h2><table><tr><th>模式</th><th>核心思想</th></tr><tr><td>适配器模式</td><td>接收对于一个对象的调用，并将其转换为另一个对象可识别的格式和接口</td></tr><tr><td>桥接模式</td><td>将一个大类拆分为抽象部分和实现部分，使其可以独立变化</td></tr><tr><td>组合模式</td><td>将对象组合成树状结构，并能像使用独立对象一样使用它们</td></tr><tr><td>装饰模式</td><td>通过将对象放入特殊封装来为原对象增加新的行为</td></tr><tr><td>外观模式</td><td>为复杂的系统、程序库或框架提供一个简单但有限的接口</td></tr><tr><td>享元模式</td><td>通过共享多个对象的相同状态，来在有限的内存中载入更多的对象</td></tr><tr><td>代理模式</td><td>由代理对象接收客户端的请求并进行一些处理，再将请求传递给服务对象</td></tr></table><h2 id="行为模式" tabindex="-1"><a class="header-anchor" href="#行为模式" aria-hidden="true">#</a> 行为模式</h2><table><tr><th>模式</th><th>核心思想</th></tr><tr><td>责任链模式</td><td>允许将请求沿着处理中链传递，直至其中一个处理者对其进行处理</td></tr><tr><td>命令模式</td><td>将一个请求封装成一个对象，将发出者和处理者解耦，并能延迟请求执行或放入队列中，实现可撤销操作</td></tr><tr><td>迭代器模式</td><td>提供一个方法在不暴露集合对象内部细节的情况下遍历集合内的所有元素</td></tr><tr><td>中介者模式</td><td>限制对象之间的直接交互，迫使它们通过一个中介者对象进行合作</td></tr><tr><td>备忘录模式</td><td>允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态</td></tr><tr><td>观察者模式</td><td>允许一个对象将其状态的改变通知其他对象</td></tr><tr><td>状态模式</td><td>允许一个对象在其内部状态改变时改变它的行为，使其看上去就像改变了自身所属的类一样</td></tr><tr><td>策略模式</td><td>定义一系列的算法，并将每种算法放入独立的类中，以使算法的对象能够相互替换</td></tr><tr><td>模板方法模式</td><td>在基类中定义一个算法框架，允许子类在不修改结构的情况下重写特定步骤</td></tr><tr><td>访问者模式</td><td>允许在不修改已有代码的情况下向已有类层次中增加新的行为</td></tr></table>',6),n=[h];function c(i,o){return d(),r("div",null,n)}const _=t(a,[["render",c],["__file","index.html.vue"]]);export{_ as default};
