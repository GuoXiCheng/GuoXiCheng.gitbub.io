const e=JSON.parse(`{"key":"v-98eaee04","path":"/design-pattern/creational/singleton.html","title":"单例模式","lang":"zh-CN","frontmatter":{"order":5,"description":"核心思想 单例模式可以确保一个类只有一个实例，并提供一个访问该实例的全局节点。 典型用例 全局缓存 单例模式提供了一个全局访问点，以便所有代码共同使用一个缓存实例，从而允许不同组件共享和操作相同的数据。 在这个例子中，缓存类包含一个私有的构造函数，以防止外部直接创建实例。这样，无论在应用程序的哪个部分获取缓存实例，都是同一个实例，从而确保了缓存数据的一...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/design-pattern/creational/singleton.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"核心思想 单例模式可以确保一个类只有一个实例，并提供一个访问该实例的全局节点。 典型用例 全局缓存 单例模式提供了一个全局访问点，以便所有代码共同使用一个缓存实例，从而允许不同组件共享和操作相同的数据。 在这个例子中，缓存类包含一个私有的构造函数，以防止外部直接创建实例。这样，无论在应用程序的哪个部分获取缓存实例，都是同一个实例，从而确保了缓存数据的一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-20T06:42:37.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-20T06:42:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-20T06:42:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"核心思想","slug":"核心思想","link":"#核心思想","children":[]},{"level":2,"title":"典型用例","slug":"典型用例","link":"#典型用例","children":[{"level":3,"title":"全局缓存","slug":"全局缓存","link":"#全局缓存","children":[]}]}],"git":{"createdTime":1698031396000,"updatedTime":1700462557000},"readingTime":{"minutes":0.69,"words":207},"filePathRelative":"design-pattern/creational/singleton.md","localizedDate":"2023年10月23日","autoDesc":true}`);export{e as data};
