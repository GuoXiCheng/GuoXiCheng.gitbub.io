import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,e as u,w as a,b as n,a as r,d as s}from"./app-CTDhxuZ1.js";const d={},k=n("h2",{id:"npm-镜像源切换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#npm-镜像源切换"},[n("span",null,"npm 镜像源切换")])],-1),m=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"npm"),s(` config get registry
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"npm"),s(" config "),n("span",{class:"token builtin class-name"},"set"),s(` registry https://registry.npm.taobao.org
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"npm"),s(" config "),n("span",{class:"token builtin class-name"},"set"),s(` registry https://registry.npmjs.org
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),g=r(`<h2 id="替换字符串中的回车、空格和换行" tabindex="-1"><a class="header-anchor" href="#替换字符串中的回车、空格和换行"><span>替换字符串中的回车、空格和换行</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\n|\\ +|\\\\</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="求幂运算" tabindex="-1"><a class="header-anchor" href="#求幂运算"><span>求幂运算</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="截取数组" tabindex="-1"><a class="header-anchor" href="#截取数组"><span>截取数组</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="冻结对象" tabindex="-1"><a class="header-anchor" href="#冻结对象"><span>冻结对象</span></a></h2><p>一个被冻结的对象不能被修改，所有属性都为只读。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
	prop<span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="美化json" tabindex="-1"><a class="header-anchor" href="#美化json"><span>美化JSON</span></a></h2><p><code>JSON.stringify()</code>方法包含三个参数：</p><ol><li>json: 可以是数组或Object</li><li>replacer: 可以是数组或过滤函数 <ul><li>当为数组时，数组中的属性按顺序表示要被过滤的属性</li><li>当为函数时，函数的返回值表示要被过滤的属性</li></ul></li><li>space: 表示缩进</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="合并多个对象" tabindex="-1"><a class="header-anchor" href="#合并多个对象"><span>合并多个对象</span></a></h2><p>合并后的对象中的键将唯一存在，后者合并的值将会覆盖已存在的键的值。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token operator">...</span>obj2 <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1, b: 3, c: 4 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="简化短路运算" tabindex="-1"><a class="header-anchor" href="#简化短路运算"><span>简化短路运算</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>isOnline<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用 &amp;&amp; 简化</span>
isOnline <span class="token operator">&amp;&amp;</span> <span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	name <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用 || 简化</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建纯净对象" tabindex="-1"><a class="header-anchor" href="#创建纯净对象"><span>创建纯净对象</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 创建的对象会继承Object的方法</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建的对象原型链上没有任何属性</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="避免多条件并列" tabindex="-1"><a class="header-anchor" href="#避免多条件并列"><span>避免多条件并列</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">&#39;process&#39;</span> <span class="token operator">||</span> status <span class="token operator">===</span> <span class="token string">&#39;wait&#39;</span> <span class="token operator">||</span> status <span class="token operator">===</span> <span class="token string">&#39;fail&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用 includes 简化</span>
<span class="token keyword">const</span> <span class="token keyword">enum</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;process&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wait&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fail&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">enum</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>                                        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组去重" tabindex="-1"><a class="header-anchor" href="#数组去重"><span>数组去重</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组转为对象" tabindex="-1"><a class="header-anchor" href="#数组转为对象"><span>数组转为对象</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>arr <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// { 0: &#39;a&#39;, 1: &#39;b&#39;, 2: &#39;c&#39;, 3: &#39;d&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串类型转数字" tabindex="-1"><a class="header-anchor" href="#字符串类型转数字"><span>字符串类型转数字</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">&#39;18&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newAge <span class="token operator">=</span> <span class="token operator">+</span>age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="取得数组最后一项" tabindex="-1"><a class="header-anchor" href="#取得数组最后一项"><span>取得数组最后一项</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通用数据类型判断方法" tabindex="-1"><a class="header-anchor" href="#通用数据类型判断方法"><span>通用数据类型判断方法</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 先进行typeof判断，如果是基础数据类型，直接返回</span>
    <span class="token keyword">return</span> type<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 对于typeof返回结果是object的，再进行如下的判断，正则返回结果</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\[object (\\S+)\\]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function h(y,f){const p=o("CodeTabs");return l(),i("div",null,[k,u(p,{id:"3",data:[{id:"查看当前使用的镜像源"},{id:"切换淘宝镜像源"},{id:"切换NPM官方镜像源"}]},{title0:a(({value:e,isActive:t})=>[s("查看当前使用的镜像源")]),title1:a(({value:e,isActive:t})=>[s("切换淘宝镜像源")]),title2:a(({value:e,isActive:t})=>[s("切换NPM官方镜像源")]),tab0:a(({value:e,isActive:t})=>[m]),tab1:a(({value:e,isActive:t})=>[v]),tab2:a(({value:e,isActive:t})=>[b]),_:1}),g])}const w=c(d,[["render",h],["__file","index.html.vue"]]),_=JSON.parse(`{"path":"/develop/typescript/","title":"Typescript","lang":"zh-CN","frontmatter":{"title":"Typescript","index":false,"icon":"fa-brands fa-js-square","dir":{"link":true},"description":"npm 镜像源切换 替换字符串中的回车、空格和换行 求幂运算 截取数组 冻结对象 一个被冻结的对象不能被修改，所有属性都为只读。 美化JSON JSON.stringify()方法包含三个参数： json: 可以是数组或Object replacer: 可以是数组或过滤函数 当为数组时，数组中的属性按顺序表示要被过滤的属性 当为函数时，函数的返回值表示...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/develop/typescript/"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"Typescript"}],["meta",{"property":"og:description","content":"npm 镜像源切换 替换字符串中的回车、空格和换行 求幂运算 截取数组 冻结对象 一个被冻结的对象不能被修改，所有属性都为只读。 美化JSON JSON.stringify()方法包含三个参数： json: 可以是数组或Object replacer: 可以是数组或过滤函数 当为数组时，数组中的属性按顺序表示要被过滤的属性 当为函数时，函数的返回值表示..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-22T07:32:13.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-22T07:32:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Typescript\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-22T07:32:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"npm 镜像源切换","slug":"npm-镜像源切换","link":"#npm-镜像源切换","children":[]},{"level":2,"title":"替换字符串中的回车、空格和换行","slug":"替换字符串中的回车、空格和换行","link":"#替换字符串中的回车、空格和换行","children":[]},{"level":2,"title":"求幂运算","slug":"求幂运算","link":"#求幂运算","children":[]},{"level":2,"title":"截取数组","slug":"截取数组","link":"#截取数组","children":[]},{"level":2,"title":"冻结对象","slug":"冻结对象","link":"#冻结对象","children":[]},{"level":2,"title":"美化JSON","slug":"美化json","link":"#美化json","children":[]},{"level":2,"title":"合并多个对象","slug":"合并多个对象","link":"#合并多个对象","children":[]},{"level":2,"title":"简化短路运算","slug":"简化短路运算","link":"#简化短路运算","children":[]},{"level":2,"title":"创建纯净对象","slug":"创建纯净对象","link":"#创建纯净对象","children":[]},{"level":2,"title":"避免多条件并列","slug":"避免多条件并列","link":"#避免多条件并列","children":[]},{"level":2,"title":"数组去重","slug":"数组去重","link":"#数组去重","children":[]},{"level":2,"title":"数组转为对象","slug":"数组转为对象","link":"#数组转为对象","children":[]},{"level":2,"title":"字符串类型转数字","slug":"字符串类型转数字","link":"#字符串类型转数字","children":[]},{"level":2,"title":"取得数组最后一项","slug":"取得数组最后一项","link":"#取得数组最后一项","children":[]},{"level":2,"title":"通用数据类型判断方法","slug":"通用数据类型判断方法","link":"#通用数据类型判断方法","children":[]}],"git":{"createdTime":1697638485000,"updatedTime":1703230333000},"readingTime":{"minutes":1.88,"words":564},"filePathRelative":"develop/typescript/README.md","localizedDate":"2023年10月18日","autoDesc":true,"excerpt":"<h2>npm 镜像源切换</h2>\\n\\n<h2>替换字符串中的回车、空格和换行</h2>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code>string<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">replace</span><span class=\\"token punctuation\\">(</span><span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\n|\\\\ +|\\\\\\\\</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">g</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>"}`);export{w as comp,_ as data};
