import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as r,d as u,w as a,a as p,e as n,b as s}from"./app-CxdspBVH.js";const d={},k=p(`<h1 id="create-request" tabindex="-1"><a class="header-anchor" href="#create-request"><span>Create Request</span></a></h1><h2 id="intall-tinycrud" tabindex="-1"><a class="header-anchor" href="#intall-tinycrud"><span>Intall TinyCRUD</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> tiny-crud</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="create-issue" tabindex="-1"><a class="header-anchor" href="#create-issue"><span>Create Issue</span></a></h2><p>Login your Gitee/Github/Gitlab, choose a suitable project, create an issue to store data.</p><h2 id="create-request-1" tabindex="-1"><a class="header-anchor" href="#create-request-1"><span>Create Request</span></a></h2><h3 id="prepare-personal-access-token" tabindex="-1"><a class="header-anchor" href="#prepare-personal-access-token"><span>Prepare Personal Access Token</span></a></h3><table><tr><th>Platform</th><th></th></tr><tr><td>Github</td><td><a href="https://www.google.com/search?q=Gitlab+Person+Access+Token">How to Get Personal Access Token</a></td></tr><tr><td>Gitlab</td><td><a href="https://www.google.com/search?q=Github+Person+Access+Token">How to Get Personal Access Token</a></td></tr><tr><td>Gitee</td><td><a href="https://www.google.com/search?q=Gitee+Person+Access+Token">How to Get Personal Access Token</a></td></tr></table><h3 id="create-request-instance" tabindex="-1"><a class="header-anchor" href="#create-request-instance"><span>Create Request Instance</span></a></h3><p>If you are in Node/Web environment, you can use the following code to create a request:</p>`,10),v=s("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts","data-title":"ts"},[s("pre",{class:"language-typescript"},[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(" axios "),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},'"axios"'),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" createRequest "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},'"tiny-crud"'),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"const"),n(" GithubRequest "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"createRequest"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    httpLib"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"axios"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    httpClient"),s("span",{class:"token operator"},":"),n(" axios"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    accessToken"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"Your Personal Access Token"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    platform"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"github"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    owner"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"Your Owner"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    repo"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"Your Repo"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),m=s("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts","data-title":"ts"},[s("pre",{class:"language-typescript"},[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(" axios "),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},'"axios"'),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" createRequest "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},'"tiny-crud"'),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"const"),n(" gitlabRequest "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"createRequest"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    httpLib"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"axios"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    httpClient"),s("span",{class:"token operator"},":"),n(" axios"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    accessToken"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"Your Personal Access Token"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    platform"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"gitlab"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    projectId"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"Your Project ID"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),h=s("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts","data-title":"ts"},[s("pre",{class:"language-typescript"},[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(" axios "),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},'"axios"'),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" createRequest "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},'"tiny-crud"'),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"const"),n(" giteeRequest "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"createRequest"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    httpLib"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"axios"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    httpClient"),s("span",{class:"token operator"},":"),n(" axios"),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    accessToken"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"Your Personal Access Token"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[n("    platform"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"gitee"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    owner"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"Your Owner"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[n("    repo"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token string"},'"Your Repo"'),s("span",{class:"token punctuation"},",")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),b=p(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>Install Axios to create request in Web/Node environment</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> i axios</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>If you are in Wechat Mini Program environment, you can use the following code to create a request:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tiny-crud&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> githubRequest <span class="token operator">=</span> <span class="token function">createRequest</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    httpLib<span class="token operator">:</span> <span class="token string">&quot;wx&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    httpClient<span class="token operator">:</span> wx<span class="token punctuation">,</span></span>
<span class="line">    accessToken<span class="token operator">:</span> <span class="token string">&quot;Your Personal Access Token&quot;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    platform<span class="token operator">:</span> <span class="token string">&quot;github&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    owner<span class="token operator">:</span> <span class="token string">&quot;Your Owner&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    repo<span class="token operator">:</span> <span class="token string">&quot;Your Repo&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, the request instance will use official API to peform CRUD operations. If you want to use your own API, you can use the following code to create a request:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> githubRequest <span class="token operator">=</span> <span class="token function">createRequest</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    httpLib<span class="token operator">:</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    httpClient<span class="token operator">:</span> axios<span class="token punctuation">,</span></span>
<span class="line">    accessToken<span class="token operator">:</span> <span class="token string">&quot;Your Personal Access Token&quot;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    platform<span class="token operator">:</span> <span class="token string">&quot;github&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    owner<span class="token operator">:</span> <span class="token string">&quot;Your Owner&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    repo<span class="token operator">:</span> <span class="token string">&quot;Your Repo&quot;</span><span class="token punctuation">,</span></span>
<span class="line highlighted">    baseURL<span class="token operator">:</span> <span class="token string">&quot;https://your-github-api.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TinyCRUD will use the following API to perform CRUD operations:</p><table><thead><tr><th>Platform</th><th>API</th></tr></thead><tbody><tr><td>Github</td><td><code>https://api.github.com</code></td></tr><tr><td>Gitlab</td><td><code>https://gitlab.com</code></td></tr><tr><td>Gitee</td><td><code>https://gitee.com</code></td></tr></tbody></table><p>You can afford a issue number to the request instance, so that TinyCRUD will use this issue to store data:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> githubRequest <span class="token operator">=</span> <span class="token function">createRequest</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    httpLib<span class="token operator">:</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    httpClient<span class="token operator">:</span> axios<span class="token punctuation">,</span></span>
<span class="line">    accessToken<span class="token operator">:</span> <span class="token string">&quot;Your Personal Access Token&quot;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    platform<span class="token operator">:</span> <span class="token string">&quot;github&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    owner<span class="token operator">:</span> <span class="token string">&quot;Your Owner&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    repo<span class="token operator">:</span> <span class="token string">&quot;Your Repo&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    baseURL<span class="token operator">:</span> <span class="token string">&quot;https://your-github-api.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line highlighted">    issueNumber<span class="token operator">:</span> <span class="token string">&quot;Your Issue Number&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="verify-authorization" tabindex="-1"><a class="header-anchor" href="#verify-authorization"><span>Verify Authorization</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>githubRequest<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="use-encrypt" tabindex="-1"><a class="header-anchor" href="#use-encrypt"><span>Use Encrypt</span></a></h2><p>If useEncrypt is true, TinyCRUD will encrypt the data before storing it in the issue, and decrypt it when reading it.</p><p>So, you must implement the encrypt/decrypt function when the useEncrypt is true.TinyCRUD will use the encrypt/decrypt function to encrypt/decrypt the data.</p><p>For example, you can use the following code to encrypt/decrypt data with crypto-js:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> CryptoJS <span class="token keyword">from</span> <span class="token string">&quot;crypto-js&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> githubRequest <span class="token operator">=</span> <span class="token function">createRequest</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    httpLib<span class="token operator">:</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    httpClient<span class="token operator">:</span> axios<span class="token punctuation">,</span></span>
<span class="line">    accessToken<span class="token operator">:</span> <span class="token string">&quot;Your Personal Access Token&quot;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    platform<span class="token operator">:</span> <span class="token string">&quot;github&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    owner<span class="token operator">:</span> <span class="token string">&quot;Your Owner&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    repo<span class="token operator">:</span> <span class="token string">&quot;Your Repo&quot;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    useEncrypt<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">encryptFn</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;Your Secret Key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">decryptFn</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;Your Secret Key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span></span>
<span class="line">            CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8</span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Install crypto-js to encrypt/decrypt data</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> i crypto-js</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The encrypt/decrypt function will be ignored when useEncrypt is false.</p><p>So, you can choose whether to use encryption or not, depending on your environment.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> githubRequest <span class="token operator">=</span> <span class="token function">createRequest</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    httpLib<span class="token operator">:</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    httpClient<span class="token operator">:</span> axios<span class="token punctuation">,</span></span>
<span class="line">    accessToken<span class="token operator">:</span> <span class="token string">&quot;Your Personal Access Token&quot;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    platform<span class="token operator">:</span> <span class="token string">&quot;github&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    owner<span class="token operator">:</span> <span class="token string">&quot;Your Owner&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    repo<span class="token operator">:</span> <span class="token string">&quot;Your Repo&quot;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    useEncrypt<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">encryptFn</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;Your Secret Key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">decryptFn</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;Your Secret Key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span></span>
<span class="line">            CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8</span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20);function g(y,q){const o=i("CodeTabs");return l(),r("div",null,[k,u(o,{id:"26",data:[{id:"github"},{id:"gitlab"},{id:"gitee"}]},{title0:a(({value:e,isActive:t})=>[n("github")]),title1:a(({value:e,isActive:t})=>[n("gitlab")]),title2:a(({value:e,isActive:t})=>[n("gitee")]),tab0:a(({value:e,isActive:t})=>[v]),tab1:a(({value:e,isActive:t})=>[m]),tab2:a(({value:e,isActive:t})=>[h]),_:1}),b])}const R=c(d,[["render",g],["__file","create-request.html.vue"]]),x=JSON.parse(`{"path":"/dump/en/projects/TinyCRUD-Docs/create-request.html","title":"Create Request","lang":"zh-CN","frontmatter":{"index":true,"order":1,"description":"Create Request Intall TinyCRUD Create Issue Login your Gitee/Github/Gitlab, choose a suitable project, create an issue to store data. Create Request Prepare Personal Access Toke...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/dump/en/projects/TinyCRUD-Docs/create-request.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"Create Request"}],["meta",{"property":"og:description","content":"Create Request Intall TinyCRUD Create Issue Login your Gitee/Github/Gitlab, choose a suitable project, create an issue to store data. Create Request Prepare Personal Access Toke..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-13T07:17:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-13T07:17:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Create Request\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-13T07:17:20.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Intall TinyCRUD","slug":"intall-tinycrud","link":"#intall-tinycrud","children":[]},{"level":2,"title":"Create Issue","slug":"create-issue","link":"#create-issue","children":[]},{"level":2,"title":"Create Request","slug":"create-request-1","link":"#create-request-1","children":[{"level":3,"title":"Prepare Personal Access Token","slug":"prepare-personal-access-token","link":"#prepare-personal-access-token","children":[]},{"level":3,"title":"Create Request Instance","slug":"create-request-instance","link":"#create-request-instance","children":[]}]},{"level":2,"title":"Verify Authorization","slug":"verify-authorization","link":"#verify-authorization","children":[]},{"level":2,"title":"Use Encrypt","slug":"use-encrypt","link":"#use-encrypt","children":[]}],"git":{"createdTime":1704790218000,"updatedTime":1718263040000},"readingTime":{"minutes":2.03,"words":610},"filePathRelative":"dump/en/projects/TinyCRUD-Docs/create-request.md","localizedDate":"2024年1月9日","autoDesc":true,"excerpt":"\\n<h2>Intall TinyCRUD</h2>\\n<div class=\\"language-bash\\" data-highlighter=\\"prismjs\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"line\\"><span class=\\"token function\\">npm</span> <span class=\\"token function\\">install</span> tiny-crud</span>\\n<span class=\\"line\\"></span></code></pre></div>"}`);export{R as comp,x as data};
