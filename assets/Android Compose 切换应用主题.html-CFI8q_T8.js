import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-Cxays021.js";const e={},p=t(`<h1 id="android-compose-切换应用主题" tabindex="-1"><a class="header-anchor" href="#android-compose-切换应用主题"><span>Android Compose 切换应用主题</span></a></h1><h2 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路"><span>实现思路</span></a></h2><p>Android 中常见的切换深色主题和浅色主题的方式：在使用 Compose 绘制的界面中，可以使用一个状态来标识当前的主题。当用户切换主题时，使用 DataStore 保存并更新主题状态，UI 会自动刷新。</p><h2 id="materialtheme" tabindex="-1"><a class="header-anchor" href="#materialtheme"><span>MaterialTheme</span></a></h2><p>在 ui.theme. Theme.kt 文件中，定义好了深色和浅色主题的样式：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">val</span> darkColorScheme <span class="token operator">=</span> <span class="token function">darkColorScheme</span><span class="token punctuation">(</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">)</span>

<span class="token keyword">private</span> <span class="token keyword">val</span> lightColorScheme <span class="token operator">=</span> <span class="token function">lightColorScheme</span><span class="token punctuation">(</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">)</span>

<span class="token annotation builtin">@Composable</span>
<span class="token keyword">fun</span> <span class="token function">AppTheme</span><span class="token punctuation">(</span>
    darkTheme<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token function">isSystemInDarkTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// Dynamic color is available on Android 12+</span>
    dynamicColor<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    content<span class="token operator">:</span> <span class="token annotation builtin">@Composable</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Activity 中只需要使用定义好的主题色，传递一个 boolean 值给 darkTheme 来决定使用深色或浅色主题：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>
    DataStoreUtils<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span>
    setContent <span class="token punctuation">{</span>
        <span class="token function">AppTheme</span><span class="token punctuation">(</span>darkTheme <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">Column</span><span class="token punctuation">(</span>
                    modifier <span class="token operator">=</span> Modifier
                        <span class="token punctuation">.</span><span class="token function">fillMaxSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>MaterialTheme<span class="token punctuation">.</span>colorScheme<span class="token punctuation">.</span>background<span class="token punctuation">)</span> <span class="token comment">// 使用主题色</span>
                <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// ...</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="检查当前系统主题" tabindex="-1"><a class="header-anchor" href="#检查当前系统主题"><span>检查当前系统主题</span></a></h2><p>可以使用 Configuration.uiMode 来检查当前系统的主题：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> nightModeFlags<span class="token operator">:</span> Int <span class="token operator">=</span> resources<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>uiMode <span class="token operator">and</span> Configuration<span class="token punctuation">.</span>UI_MODE_NIGHT_MASK
<span class="token keyword">when</span> <span class="token punctuation">(</span>nightModeFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Configuration<span class="token punctuation">.</span>UI_MODE_NIGHT_YES <span class="token operator">-&gt;</span> <span class="token comment">// 深色模式启用</span>
    Configuration<span class="token punctuation">.</span>UI_MODE_NIGHT_NO <span class="token operator">-&gt;</span> <span class="token comment">// 深色模式未启用</span>
    Configuration<span class="token punctuation">.</span>UI_MODE_NIGHT_UNDEFINED <span class="token operator">-&gt;</span> <span class="token comment">// 深色模式未定义</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-datastore-保存主题状态" tabindex="-1"><a class="header-anchor" href="#使用-datastore-保存主题状态"><span>使用 DataStore 保存主题状态</span></a></h2><h3 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖"><span>添加依赖</span></a></h3><p>在 app/build.gradle 文件中添加依赖：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    implementation <span class="token interpolation-string"><span class="token string">&quot;androidx.datastore:datastore-preferences:1.0.0&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建-datastore-工具类" tabindex="-1"><a class="header-anchor" href="#创建-datastore-工具类"><span>创建 DataStore 工具类</span></a></h3><p>在 utils/DataStoreUtils.kt 文件中创建 DataStore 工具类：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token comment">/*
This file contains code from Project PlayAndroid (https://github.com/zhujiang521/PlayAndroid)
*/</span>
<span class="token keyword">val</span> Context<span class="token punctuation">.</span>dataStore<span class="token operator">:</span> DataStore<span class="token operator">&lt;</span>Preferences<span class="token operator">&gt;</span> <span class="token keyword">by</span> <span class="token function">preferencesDataStore</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;APPDataStore&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">object</span> DataStoreUtils <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> dataStore<span class="token operator">:</span> DataStore<span class="token operator">&lt;</span>Preferences<span class="token operator">&gt;</span>

    <span class="token comment">/**
     * init Context
     * @param context Context
     */</span>
    <span class="token keyword">fun</span> <span class="token keyword">init</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataStore <span class="token operator">=</span> context<span class="token punctuation">.</span>dataStore
    <span class="token punctuation">}</span>

    <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;UNCHECKED_CAST&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token operator">&lt;</span>U<span class="token operator">&gt;</span> <span class="token function">getSyncData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> default<span class="token operator">:</span> U<span class="token punctuation">)</span><span class="token operator">:</span> U <span class="token punctuation">{</span>
        <span class="token keyword">val</span> res <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">is</span> Long <span class="token operator">-&gt;</span> <span class="token function">readLongData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> default<span class="token punctuation">)</span>
            <span class="token keyword">is</span> String <span class="token operator">-&gt;</span> <span class="token function">readStringData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> default<span class="token punctuation">)</span>
            <span class="token keyword">is</span> Int <span class="token operator">-&gt;</span> <span class="token function">readIntData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> default<span class="token punctuation">)</span>
            <span class="token keyword">is</span> Boolean <span class="token operator">-&gt;</span> <span class="token function">readBooleanData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> default<span class="token punctuation">)</span>
            <span class="token keyword">is</span> Float <span class="token operator">-&gt;</span> <span class="token function">readFloatData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> default<span class="token punctuation">)</span>
            <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This type can be saved into DataStore&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res <span class="token keyword">as</span> U
    <span class="token punctuation">}</span>

    <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;UNCHECKED_CAST&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token operator">&lt;</span>U<span class="token operator">&gt;</span> <span class="token function">getData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> default<span class="token operator">:</span> U<span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>U<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> <span class="token keyword">data</span> <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">is</span> Long <span class="token operator">-&gt;</span> <span class="token function">readLongFlow</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> default<span class="token punctuation">)</span>
            <span class="token keyword">is</span> String <span class="token operator">-&gt;</span> <span class="token function">readStringFlow</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> default<span class="token punctuation">)</span>
            <span class="token keyword">is</span> Int <span class="token operator">-&gt;</span> <span class="token function">readIntFlow</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> default<span class="token punctuation">)</span>
            <span class="token keyword">is</span> Boolean <span class="token operator">-&gt;</span> <span class="token function">readBooleanFlow</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> default<span class="token punctuation">)</span>
            <span class="token keyword">is</span> Float <span class="token operator">-&gt;</span> <span class="token function">readFloatFlow</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> default<span class="token punctuation">)</span>
            <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This type can be saved into DataStore&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">data</span> <span class="token keyword">as</span> Flow<span class="token operator">&lt;</span>U<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>U<span class="token operator">&gt;</span> <span class="token function">putData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> U<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">when</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">is</span> Long <span class="token operator">-&gt;</span> <span class="token function">saveLongData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token keyword">is</span> String <span class="token operator">-&gt;</span> <span class="token function">saveStringData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token keyword">is</span> Int <span class="token operator">-&gt;</span> <span class="token function">saveIntData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token keyword">is</span> Boolean <span class="token operator">-&gt;</span> <span class="token function">saveBooleanData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token keyword">is</span> Float <span class="token operator">-&gt;</span> <span class="token function">saveFloatData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This type can be saved into DataStore&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token operator">&lt;</span>U<span class="token operator">&gt;</span> <span class="token function">putSyncData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> U<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">when</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">is</span> Long <span class="token operator">-&gt;</span> <span class="token function">saveSyncLongData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token keyword">is</span> String <span class="token operator">-&gt;</span> <span class="token function">saveSyncStringData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token keyword">is</span> Int <span class="token operator">-&gt;</span> <span class="token function">saveSyncIntData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token keyword">is</span> Boolean <span class="token operator">-&gt;</span> <span class="token function">saveSyncBooleanData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token keyword">is</span> Float <span class="token operator">-&gt;</span> <span class="token function">saveSyncFloatData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;This type can be saved into DataStore&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">readBooleanFlow</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> default<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Boolean<span class="token operator">&gt;</span> <span class="token operator">=</span>
        dataStore<span class="token punctuation">.</span>data
            <span class="token punctuation">.</span><span class="token function">catch</span> <span class="token punctuation">{</span>
                <span class="token comment">//当读取数据遇到错误时，如果是 \`IOException\` 异常，发送一个 emptyPreferences 来重新使用</span>
                <span class="token comment">//但是如果是其他的异常，最好将它抛出去，不要隐藏问题</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token keyword">is</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    it<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token function">emptyPreferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> it
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span>
                it<span class="token punctuation">[</span><span class="token function">booleanPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">?:</span> default
            <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">readBooleanData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> default<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
        <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token boolean">false</span>
        runBlocking <span class="token punctuation">{</span>
            dataStore<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span>
                value <span class="token operator">=</span> it<span class="token punctuation">[</span><span class="token function">booleanPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">?:</span> default
                <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">readIntFlow</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> default<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span>
        dataStore<span class="token punctuation">.</span>data
            <span class="token punctuation">.</span><span class="token function">catch</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token keyword">is</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    it<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token function">emptyPreferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> it
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span>
                it<span class="token punctuation">[</span><span class="token function">intPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">?:</span> default
            <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">readIntData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> default<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
        <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">0</span>
        runBlocking <span class="token punctuation">{</span>
            dataStore<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span>
                value <span class="token operator">=</span> it<span class="token punctuation">[</span><span class="token function">intPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">?:</span> default
                <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">readStringFlow</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> default<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token operator">=</span>
        dataStore<span class="token punctuation">.</span>data
            <span class="token punctuation">.</span><span class="token function">catch</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token keyword">is</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    it<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token function">emptyPreferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> it
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span>
                it<span class="token punctuation">[</span><span class="token function">stringPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">?:</span> default
            <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">readStringData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> default<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
        runBlocking <span class="token punctuation">{</span>
            dataStore<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span>
                value <span class="token operator">=</span> it<span class="token punctuation">[</span><span class="token function">stringPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">?:</span> default
                <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">readFloatFlow</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> default<span class="token operator">:</span> Float <span class="token operator">=</span> <span class="token number">0f</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Float<span class="token operator">&gt;</span> <span class="token operator">=</span>
        dataStore<span class="token punctuation">.</span>data
            <span class="token punctuation">.</span><span class="token function">catch</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token keyword">is</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    it<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token function">emptyPreferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> it
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span>
                it<span class="token punctuation">[</span><span class="token function">floatPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">?:</span> default
            <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">readFloatData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> default<span class="token operator">:</span> Float <span class="token operator">=</span> <span class="token number">0f</span><span class="token punctuation">)</span><span class="token operator">:</span> Float <span class="token punctuation">{</span>
        <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">0f</span>
        runBlocking <span class="token punctuation">{</span>
            dataStore<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span>
                value <span class="token operator">=</span> it<span class="token punctuation">[</span><span class="token function">floatPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">?:</span> default
                <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">readLongFlow</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> default<span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token operator">:</span> Flow<span class="token operator">&lt;</span>Long<span class="token operator">&gt;</span> <span class="token operator">=</span>
        dataStore<span class="token punctuation">.</span>data
            <span class="token punctuation">.</span><span class="token function">catch</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token keyword">is</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    it<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token function">emptyPreferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> it
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span>
                it<span class="token punctuation">[</span><span class="token function">longPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">?:</span> default
            <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">readLongData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> default<span class="token operator">:</span> Long <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token punctuation">{</span>
        <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">0L</span>
        runBlocking <span class="token punctuation">{</span>
            dataStore<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">first</span> <span class="token punctuation">{</span>
                value <span class="token operator">=</span> it<span class="token punctuation">[</span><span class="token function">longPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">?:</span> default
                <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value
    <span class="token punctuation">}</span>

    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">saveBooleanData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataStore<span class="token punctuation">.</span><span class="token function">edit</span> <span class="token punctuation">{</span> mutablePreferences <span class="token operator">-&gt;</span>
            mutablePreferences<span class="token punctuation">[</span><span class="token function">booleanPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">saveSyncBooleanData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token operator">=</span>
        runBlocking <span class="token punctuation">{</span> <span class="token function">saveBooleanData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">}</span>

    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">saveIntData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataStore<span class="token punctuation">.</span><span class="token function">edit</span> <span class="token punctuation">{</span> mutablePreferences <span class="token operator">-&gt;</span>
            mutablePreferences<span class="token punctuation">[</span><span class="token function">intPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">saveSyncIntData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span> <span class="token function">saveIntData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">}</span>

    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">saveStringData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataStore<span class="token punctuation">.</span><span class="token function">edit</span> <span class="token punctuation">{</span> mutablePreferences <span class="token operator">-&gt;</span>
            mutablePreferences<span class="token punctuation">[</span><span class="token function">stringPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">saveSyncStringData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span> <span class="token function">saveStringData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">}</span>

    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">saveFloatData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> Float<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataStore<span class="token punctuation">.</span><span class="token function">edit</span> <span class="token punctuation">{</span> mutablePreferences <span class="token operator">-&gt;</span>
            mutablePreferences<span class="token punctuation">[</span><span class="token function">floatPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">saveSyncFloatData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> Float<span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span> <span class="token function">saveFloatData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">}</span>

    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">saveLongData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataStore<span class="token punctuation">.</span><span class="token function">edit</span> <span class="token punctuation">{</span> mutablePreferences <span class="token operator">-&gt;</span>
            mutablePreferences<span class="token punctuation">[</span><span class="token function">longPreferencesKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">saveSyncLongData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> String<span class="token punctuation">,</span> value<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span> <span class="token function">saveLongData</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">}</span>

    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataStore<span class="token punctuation">.</span><span class="token function">edit</span> <span class="token punctuation">{</span>
            it<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">clearSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        runBlocking <span class="token punctuation">{</span>
            dataStore<span class="token punctuation">.</span><span class="token function">edit</span> <span class="token punctuation">{</span>
                it<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化-datastore" tabindex="-1"><a class="header-anchor" href="#初始化-datastore"><span>初始化 DataStore</span></a></h3><p>在 Activity 中初始化 DataStore：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>
    DataStoreUtils<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span>
    setContent <span class="token punctuation">{</span>
        <span class="token function">AppTheme</span><span class="token punctuation">(</span>darkTheme <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加主题状态" tabindex="-1"><a class="header-anchor" href="#添加主题状态"><span>添加主题状态</span></a></h2><p>在 ui.theme.Theme.kt 文件中添加主题状态：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token comment">// ...</span>

<span class="token keyword">val</span> themeTypeState<span class="token operator">:</span> MutableState<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token keyword">by</span> <span class="token function">lazy</span><span class="token punctuation">(</span>mode <span class="token operator">=</span> LazyThreadSafetyMode<span class="token punctuation">.</span>SYNCHRONIZED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">mutableStateOf</span><span class="token punctuation">(</span><span class="token function">getDefaultThemeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">getDefaultThemeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> DataStoreUtils<span class="token punctuation">.</span><span class="token function">getSyncData</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;APP_THEME&quot;</span></span><span class="token punctuation">,</span> Configuration<span class="token punctuation">.</span>UI_MODE_NIGHT_NO<span class="token punctuation">)</span>

<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应主题状态" tabindex="-1"><a class="header-anchor" href="#应主题状态"><span>应主题状态</span></a></h2><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> SettingsActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>
        setContent <span class="token punctuation">{</span>
            <span class="token function">AppTheme</span><span class="token punctuation">(</span>darkTheme <span class="token operator">=</span> themeTypeState<span class="token punctuation">.</span>value <span class="token operator">==</span> Configuration<span class="token punctuation">.</span>UI_MODE_NIGHT_YES<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">Button</span><span class="token punctuation">(</span>onClick <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">toggleTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>themeTypeState<span class="token punctuation">.</span>value <span class="token operator">==</span> Configuration<span class="token punctuation">.</span>UI_MODE_NIGHT_YES<span class="token punctuation">)</span> <span class="token string-literal singleline"><span class="token string">&quot;浅色主题&quot;</span></span> <span class="token keyword">else</span> <span class="token string-literal singleline"><span class="token string">&quot;深色主题&quot;</span></span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">toggleTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> newTheme <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>themeTypeState<span class="token punctuation">.</span>value <span class="token operator">==</span> Configuration<span class="token punctuation">.</span>UI_MODE_NIGHT_YES<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Configuration<span class="token punctuation">.</span>UI_MODE_NIGHT_NO
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        Configuration<span class="token punctuation">.</span>UI_MODE_NIGHT_YES
    <span class="token punctuation">}</span>

    themeTypeState<span class="token punctuation">.</span>value <span class="token operator">=</span> newTheme
    DataStoreUtils<span class="token punctuation">.</span><span class="token function">putSyncData</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;APP_THEME&quot;</span></span><span class="token punctuation">,</span> newTheme<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","Android Compose 切换应用主题.html.vue"]]),d=JSON.parse(`{"path":"/article/Android%20Compose%20%E5%88%87%E6%8D%A2%E5%BA%94%E7%94%A8%E4%B8%BB%E9%A2%98.html","title":"Android Compose 切换应用主题","lang":"zh-CN","frontmatter":{"description":"Android Compose 切换应用主题 实现思路 Android 中常见的切换深色主题和浅色主题的方式：在使用 Compose 绘制的界面中，可以使用一个状态来标识当前的主题。当用户切换主题时，使用 DataStore 保存并更新主题状态，UI 会自动刷新。 MaterialTheme 在 ui.theme. Theme.kt 文件中，定义好了深...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/article/Android%20Compose%20%E5%88%87%E6%8D%A2%E5%BA%94%E7%94%A8%E4%B8%BB%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"Android Compose 切换应用主题"}],["meta",{"property":"og:description","content":"Android Compose 切换应用主题 实现思路 Android 中常见的切换深色主题和浅色主题的方式：在使用 Compose 绘制的界面中，可以使用一个状态来标识当前的主题。当用户切换主题时，使用 DataStore 保存并更新主题状态，UI 会自动刷新。 MaterialTheme 在 ui.theme. Theme.kt 文件中，定义好了深..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-16T07:29:48.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-16T07:29:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Android Compose 切换应用主题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-16T07:29:48.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"实现思路","slug":"实现思路","link":"#实现思路","children":[]},{"level":2,"title":"MaterialTheme","slug":"materialtheme","link":"#materialtheme","children":[]},{"level":2,"title":"检查当前系统主题","slug":"检查当前系统主题","link":"#检查当前系统主题","children":[]},{"level":2,"title":"使用 DataStore 保存主题状态","slug":"使用-datastore-保存主题状态","link":"#使用-datastore-保存主题状态","children":[{"level":3,"title":"添加依赖","slug":"添加依赖","link":"#添加依赖","children":[]},{"level":3,"title":"创建 DataStore 工具类","slug":"创建-datastore-工具类","link":"#创建-datastore-工具类","children":[]},{"level":3,"title":"初始化 DataStore","slug":"初始化-datastore","link":"#初始化-datastore","children":[]}]},{"level":2,"title":"添加主题状态","slug":"添加主题状态","link":"#添加主题状态","children":[]},{"level":2,"title":"应主题状态","slug":"应主题状态","link":"#应主题状态","children":[]}],"git":{"createdTime":1702711788000,"updatedTime":1702711788000},"readingTime":{"minutes":3.58,"words":1073},"filePathRelative":"article/Android Compose 切换应用主题.md","localizedDate":"2023年12月16日","autoDesc":true,"excerpt":"\\n<h2>实现思路</h2>\\n<p>Android 中常见的切换深色主题和浅色主题的方式：在使用 Compose 绘制的界面中，可以使用一个状态来标识当前的主题。当用户切换主题时，使用 DataStore 保存并更新主题状态，UI 会自动刷新。</p>\\n<h2>MaterialTheme</h2>\\n<p>在 ui.theme. Theme.kt 文件中，定义好了深色和浅色主题的样式：</p>\\n<div class=\\"language-kotlin\\" data-ext=\\"kt\\" data-title=\\"kt\\"><pre class=\\"language-kotlin\\"><code><span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">val</span> darkColorScheme <span class=\\"token operator\\">=</span> <span class=\\"token function\\">darkColorScheme</span><span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">val</span> lightColorScheme <span class=\\"token operator\\">=</span> <span class=\\"token function\\">lightColorScheme</span><span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token annotation builtin\\">@Composable</span>\\n<span class=\\"token keyword\\">fun</span> <span class=\\"token function\\">AppTheme</span><span class=\\"token punctuation\\">(</span>\\n    darkTheme<span class=\\"token operator\\">:</span> Boolean <span class=\\"token operator\\">=</span> <span class=\\"token function\\">isSystemInDarkTheme</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// Dynamic color is available on Android 12+</span>\\n    dynamicColor<span class=\\"token operator\\">:</span> Boolean <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n    content<span class=\\"token operator\\">:</span> <span class=\\"token annotation builtin\\">@Composable</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> Unit\\n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}`);export{r as comp,d as data};
