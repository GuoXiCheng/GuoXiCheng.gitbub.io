const e=JSON.parse(`{"key":"v-1ba56f4e","path":"/design-pattern/behavioral/iterator.html","title":"迭代器模式","lang":"zh-CN","frontmatter":{"description":"核心思想 迭代器模式提供了一种方法来顺序访问一个聚合对象中的各个元素，而不需要暴露其底层细节。 典型用例 遍历集合 当需要遍历不同类型的集合对象（如数组、列表、树结构、图）时，迭代器模式提供了一种统一的方法来访问它们的元素，无需了解集合的内部表示。 支持多种遍历方式 迭代器模式允许定义一个迭代器接口和一个具体的迭代器类，用于遍历特定的数据结构。例如，对...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/design-pattern/behavioral/iterator.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"迭代器模式"}],["meta",{"property":"og:description","content":"核心思想 迭代器模式提供了一种方法来顺序访问一个聚合对象中的各个元素，而不需要暴露其底层细节。 典型用例 遍历集合 当需要遍历不同类型的集合对象（如数组、列表、树结构、图）时，迭代器模式提供了一种统一的方法来访问它们的元素，无需了解集合的内部表示。 支持多种遍历方式 迭代器模式允许定义一个迭代器接口和一个具体的迭代器类，用于遍历特定的数据结构。例如，对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-23T14:50:55.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-23T14:50:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"迭代器模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-23T14:50:55.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"核心思想","slug":"核心思想","link":"#核心思想","children":[]},{"level":2,"title":"典型用例","slug":"典型用例","link":"#典型用例","children":[{"level":3,"title":"遍历集合","slug":"遍历集合","link":"#遍历集合","children":[]},{"level":3,"title":"支持多种遍历方式","slug":"支持多种遍历方式","link":"#支持多种遍历方式","children":[]},{"level":3,"title":"隐藏复杂结构的遍历细节","slug":"隐藏复杂结构的遍历细节","link":"#隐藏复杂结构的遍历细节","children":[]},{"level":3,"title":"同时多个遍历","slug":"同时多个遍历","link":"#同时多个遍历","children":[]},{"level":3,"title":"分离集合对象的业务逻辑","slug":"分离集合对象的业务逻辑","link":"#分离集合对象的业务逻辑","children":[]},{"level":3,"title":"间接访问集合元素","slug":"间接访问集合元素","link":"#间接访问集合元素","children":[]}]}],"git":{"createdTime":1698731921000,"updatedTime":1700751055000},"readingTime":{"minutes":1.97,"words":590},"filePathRelative":"design-pattern/behavioral/iterator.md","localizedDate":"2023年10月31日","autoDesc":true}`);export{e as data};
