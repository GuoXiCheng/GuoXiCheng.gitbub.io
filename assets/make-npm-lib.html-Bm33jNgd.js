import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as s,d as n,e as l,a}from"./app-rn6P0hQy.js";const i={},u=a(`<h1 id="制作-npm-第三方库" tabindex="-1"><a class="header-anchor" href="#制作-npm-第三方库"><span>制作 npm 第三方库</span></a></h1><h2 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目"><span>初始化项目</span></a></h2><p>使用<code>npm init</code>命令新建一个 npm 项目，这将生成一个<code>package.json</code>文件，用于定义项目的元数据和依赖项。</p><p>在根目录下新建<code>src</code>目录用于存放源码文件。</p><p>在<code>src</code>目录下新建<code>__tests__</code>目录用于存放测试文件。</p><h2 id="安装-typescript" tabindex="-1"><a class="header-anchor" href="#安装-typescript"><span>安装 Typescript</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev typescript @types/node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在根目录下创建一个<code>tsconfig.json</code>文件来配置 Typescript 编译选项：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ES5&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 生成类型声明文件</span>
        <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/**/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;**/__tests__/*&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-rollup-打包" tabindex="-1"><a class="header-anchor" href="#使用-rollup-打包"><span>使用 rollup 打包</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev rollup @rollup/plugin-typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在根目录下创建一个名为<code>rollup.config.js</code>的文件，用于配置 rollup 打包选项：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> typescript <span class="token keyword">from</span> <span class="token string">&quot;@rollup/plugin-typescript&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;src/index.ts&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&quot;dist/bundle.cjs.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// CommonJS 格式的输出</span>
            <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&quot;cjs&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&quot;dist/bundle.esm.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// ES 模块格式的输出</span>
            <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&quot;esm&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">typescript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 使用 TypeScript 插件</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>package.json</code>文件中添加<code>&quot;type&quot;: &quot;module&quot;</code>，以指示 NodeJS 将 js 文件视为 ES 模块。</p><h2 id="合并类型声明文件" tabindex="-1"><a class="header-anchor" href="#合并类型声明文件"><span>合并类型声明文件</span></a></h2><p>安装<code>rollup-plugin-dts</code>插件用于合并类型声明文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev rollup-plugin-dts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改<code>tsconfig.json</code>文件：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;declarationDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/types&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定类型声明文件的输出目录</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改<code>rollup.config.js</code>文件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> dts <span class="token keyword">from</span> <span class="token string">&quot;rollup-plugin-dts&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">/* 单独生成声明文件 */</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;dist/types/index.d.ts&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&quot;dist/index.d.ts&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&quot;es&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">dts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加构建命令" tabindex="-1"><a class="header-anchor" href="#添加构建命令"><span>添加构建命令</span></a></h2><p>安装<code>rimraf</code>用于在构建前清除<code>dist</code>目录：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev rimraf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>package.json</code>文件中添加构建命令：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;clean&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rimraf dist&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run clean &amp;&amp; rollup -c&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当执行<code>npm run build</code>命令时，会先清理<code>dist</code>目录，然后使用 rollup 打包。</p><h2 id="使用-jest-编写测试" tabindex="-1"><a class="header-anchor" href="#使用-jest-编写测试"><span>使用 jest 编写测试</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev jest ts-jest @types/jest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在根目录下创建一个名为<code>jest.config.js</code>的文件，用于配置 jest 测试选项：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">testTimeout</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span> <span class="token comment">// 设置测试超时时间</span>
    <span class="token literal-property property">preset</span><span class="token operator">:</span> <span class="token string">&quot;ts-jest&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">testEnvironment</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">collectCoverage</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启测试覆盖率</span>
    <span class="token literal-property property">coverageDirectory</span><span class="token operator">:</span> <span class="token string">&quot;coverage&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指定覆盖率报告输出目录</span>
    <span class="token literal-property property">collectCoverageFrom</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 指定需要收集覆盖率的文件</span>
        <span class="token string">&quot;src/**/*.ts&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 包括 src 目录下所有的 TypeScript 文件</span>
        <span class="token string">&quot;!src/**/*.d.ts&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 排除 TypeScript 声明文件</span>
        <span class="token string">&quot;!src/__tests__/**/*.ts&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">testMatch</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;&lt;rootDir&gt;/src/__tests__/*.test.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 指定测试文件的匹配规则</span>
    <span class="token literal-property property">testPathIgnorePatterns</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 指定需要忽略的测试文件</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>src/__tests__</code>目录下创建测试用例</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// example.test.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> yourFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./yourModule&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;description of your test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">yourFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token comment">/* expected result */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>package.json</code>文件中添加测试命令：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jest --coverage&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>npm run test</code>命令执行测试，并在指定的<code>coverage</code>目录中会生成测试覆盖率报告。</p><h2 id="构建-npm-库" tabindex="-1"><a class="header-anchor" href="#构建-npm-库"><span>构建 npm 库</span></a></h2><p>首先确保在<code>package.json</code>文件中添加</p><ul><li><code>&quot;main&quot;: &quot;dist/bundle.cjs.js&quot;</code>指向CommonJS版本的入口点。</li><li><code>&quot;module&quot;: &quot;dist/bundle.esm.js&quot;</code>指向ES模块版本的入口点。</li><li><code>&quot;types&quot;: &quot;dist/index.d.ts&quot;</code>指向类型声明文件。</li><li><code>&quot;files&quot;: [&quot;dist&quot;]</code>指定发布的文件。</li></ul>`,39),r=s("code",null,"npm run build",-1),d=s("code",null,"package.json",-1),k=s("code",null,"version",-1),m={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},v=a(`<h2 id="测试构建后的库" tabindex="-1"><a class="header-anchor" href="#测试构建后的库"><span>测试构建后的库</span></a></h2><p>在根目录下执行<code>npm pack</code>命令，将会在根目录下生成一个<code>*.tgz</code>文件，然后在另一个项目中使用<code>npm install &lt;path-to-tgz-file&gt;</code>命令安装该库。</p><h2 id="发布-npm-库" tabindex="-1"><a class="header-anchor" href="#发布-npm-库"><span>发布 npm 库</span></a></h2><p>使用<code>npm login</code>命令登录到公共镜像仓库，如果是私有镜像仓库，可以在根目录下新建<code>.npmrc</code>文件，添加<code>registry</code>字段指向私有镜像仓库地址，例如：<code>registry=https://npm.example.com</code>。</p><p>最后使用<code>npm publish</code>命令发布 npm 库。</p><h2 id="自动发布" tabindex="-1"><a class="header-anchor" href="#自动发布"><span>自动发布</span></a></h2><p>首先在 npm 账户中生成一个新的访问令牌，并添加到 Github 仓库的 Actions Secrets 中。</p><p>在项目根目录的<code>.github/workflows</code>目录下创建一个名为<code>publish.yml</code>的文件，用于配置 Github Actions，并确保在每次发布前更新<code>package.json</code>文件中的<code>version</code>版本。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Publish npm package

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> publish

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">publish</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout code
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up Node.js
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token number">18</span>
          <span class="token key atrule">registry-url</span><span class="token punctuation">:</span> <span class="token string">&#39;https://registry.npmjs.org&#39;</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build package
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build 

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Publish to npm
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm publish
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
          <span class="token key atrule">NODE_AUTH_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.NPM_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function b(g,h){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("然后在每次发布前先执行"),r,n("命令构建最新版本的库，再手动修改"),d,n("文件中的"),k,n("字段。遵循"),s("a",m,[n("语义化版本控制"),l(e)]),n("。")]),v])}const j=t(i,[["render",b],["__file","make-npm-lib.html.vue"]]),f=JSON.parse(`{"path":"/article/make-npm-lib.html","title":"制作 npm 第三方库","lang":"zh-CN","frontmatter":{"description":"制作 npm 第三方库 初始化项目 使用npm init命令新建一个 npm 项目，这将生成一个package.json文件，用于定义项目的元数据和依赖项。 在根目录下新建src目录用于存放源码文件。 在src目录下新建__tests__目录用于存放测试文件。 安装 Typescript 在根目录下创建一个tsconfig.json文件来配置 Type...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/article/make-npm-lib.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"制作 npm 第三方库"}],["meta",{"property":"og:description","content":"制作 npm 第三方库 初始化项目 使用npm init命令新建一个 npm 项目，这将生成一个package.json文件，用于定义项目的元数据和依赖项。 在根目录下新建src目录用于存放源码文件。 在src目录下新建__tests__目录用于存放测试文件。 安装 Typescript 在根目录下创建一个tsconfig.json文件来配置 Type..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-01T05:30:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-01T05:30:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"制作 npm 第三方库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-01T05:30:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"初始化项目","slug":"初始化项目","link":"#初始化项目","children":[]},{"level":2,"title":"安装 Typescript","slug":"安装-typescript","link":"#安装-typescript","children":[]},{"level":2,"title":"使用 rollup 打包","slug":"使用-rollup-打包","link":"#使用-rollup-打包","children":[]},{"level":2,"title":"合并类型声明文件","slug":"合并类型声明文件","link":"#合并类型声明文件","children":[]},{"level":2,"title":"添加构建命令","slug":"添加构建命令","link":"#添加构建命令","children":[]},{"level":2,"title":"使用 jest 编写测试","slug":"使用-jest-编写测试","link":"#使用-jest-编写测试","children":[]},{"level":2,"title":"构建 npm 库","slug":"构建-npm-库","link":"#构建-npm-库","children":[]},{"level":2,"title":"测试构建后的库","slug":"测试构建后的库","link":"#测试构建后的库","children":[]},{"level":2,"title":"发布 npm 库","slug":"发布-npm-库","link":"#发布-npm-库","children":[]},{"level":2,"title":"自动发布","slug":"自动发布","link":"#自动发布","children":[]}],"git":{"createdTime":1709271025000,"updatedTime":1709271025000},"readingTime":{"minutes":3.39,"words":1018},"filePathRelative":"article/make-npm-lib.md","localizedDate":"2024年3月1日","autoDesc":true,"excerpt":"\\n<h2>初始化项目</h2>\\n<p>使用<code>npm init</code>命令新建一个 npm 项目，这将生成一个<code>package.json</code>文件，用于定义项目的元数据和依赖项。</p>\\n<p>在根目录下新建<code>src</code>目录用于存放源码文件。</p>\\n<p>在<code>src</code>目录下新建<code>__tests__</code>目录用于存放测试文件。</p>\\n<h2>安装 Typescript</h2>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">npm</span> <span class=\\"token function\\">install</span> --save-dev typescript @types/node\\n</code></pre></div>"}`);export{j as comp,f as data};
