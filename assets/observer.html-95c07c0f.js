const e=JSON.parse(`{"key":"v-7c5065e6","path":"/design-pattern/behavioral/observer.html","title":"观察者模式","lang":"zh-CN","frontmatter":{"description":"核心思想 观察者模式允许一个对象将其状态的改变通知其他对象。 典型用例 发布订阅系统 在消息传递、事件总线或服务中，允许多个订阅者监听和响应由发布者发出的消息或事件。 在这个例子中，主题维护了一个观察者列表。观察者可以订阅主题并接收更新。当主题的 notify 方法被调用时，所有订阅的观察者都会收到消息。这种模式允许观察者和主题之间松耦合的交互，是实现...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/design-pattern/behavioral/observer.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"观察者模式"}],["meta",{"property":"og:description","content":"核心思想 观察者模式允许一个对象将其状态的改变通知其他对象。 典型用例 发布订阅系统 在消息传递、事件总线或服务中，允许多个订阅者监听和响应由发布者发出的消息或事件。 在这个例子中，主题维护了一个观察者列表。观察者可以订阅主题并接收更新。当主题的 notify 方法被调用时，所有订阅的观察者都会收到消息。这种模式允许观察者和主题之间松耦合的交互，是实现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-20T06:42:37.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-20T06:42:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"观察者模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-20T06:42:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"核心思想","slug":"核心思想","link":"#核心思想","children":[]},{"level":2,"title":"典型用例","slug":"典型用例","link":"#典型用例","children":[{"level":3,"title":"发布订阅系统","slug":"发布订阅系统","link":"#发布订阅系统","children":[]}]}],"git":{"createdTime":1698204295000,"updatedTime":1700462557000},"readingTime":{"minutes":0.63,"words":188},"filePathRelative":"design-pattern/behavioral/observer.md","localizedDate":"2023年10月25日","autoDesc":true}`);export{e as data};
