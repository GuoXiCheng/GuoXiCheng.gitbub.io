import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as t}from"./app-8fe9bc03.js";const p={},e=t(`<h1 id="建造者模式" tabindex="-1"><a class="header-anchor" href="#建造者模式" aria-hidden="true">#</a> 建造者模式</h1><h2 id="核心思想" tabindex="-1"><a class="header-anchor" href="#核心思想" aria-hidden="true">#</a> 核心思想</h2><p>建造者模式允许逐步构建复杂对象。</p><h2 id="典型用例" tabindex="-1"><a class="header-anchor" href="#典型用例" aria-hidden="true">#</a> 典型用例</h2><h3 id="文本构建" tabindex="-1"><a class="header-anchor" href="#文本构建" aria-hidden="true">#</a> 文本构建</h3><p>在需要动态构建复杂的SQL查询或其他任何形式的文本时，可以使用建造者模式来逐步构建文本的不同部分。</p><p>在这个例子中，建造者的实现类提供了一系列方法来构建 SQL 查询的不同部分。这些方法返回建造者对象本身，从而允许链式调用。通过这种方式，你可以清晰且灵活地构建出复杂的 SQL 查询或其他形式的文本。这种模式特别适用于构建那些根据不同条件和上下文变化的复杂对象。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// npm run code src/code/design-pattern/builder/text-construction.ts</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 定义一个建造者接口，这个接口将规定必须实现哪些方法来构建 SQL 查询的不同部分</span>
<span class="token keyword">interface</span> <span class="token class-name">SQLQueryBuilder</span> <span class="token punctuation">{</span>
    <span class="token function">select</span><span class="token punctuation">(</span>table<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> fields<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> SQLQueryBuilder<span class="token punctuation">;</span>
    <span class="token function">where</span><span class="token punctuation">(</span>conditions<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> SQLQueryBuilder<span class="token punctuation">;</span>
    <span class="token function">orderBy</span><span class="token punctuation">(</span>field<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> direction<span class="token operator">:</span> <span class="token string">&#39;ASC&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;DESC&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span> SQLQueryBuilder<span class="token punctuation">;</span>
    <span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 具体建造者</span>
<span class="token keyword">class</span> <span class="token class-name">SQLQuery</span> <span class="token keyword">implements</span> <span class="token class-name">SQLQueryBuilder</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> query<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

    <span class="token function">select</span><span class="token punctuation">(</span>table<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> fields<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> SQLQueryBuilder <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>query <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">SELECT </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fields<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> FROM </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>table<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">where</span><span class="token punctuation">(</span>conditions<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> SQLQueryBuilder <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>query <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> WHERE </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>conditions<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">orderBy</span><span class="token punctuation">(</span>field<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> direction<span class="token operator">:</span> <span class="token string">&#39;ASC&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;DESC&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span> SQLQueryBuilder <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>query <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> ORDER BY </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>field<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>direction<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>query<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> queryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> query <span class="token operator">=</span> queryBuilder
    <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;age &gt; 18&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ASC&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出: SELECT name, age, email FROM users WHERE age &gt; 18 ORDER BY name ASC</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","builder.html.vue"]]);export{k as default};
