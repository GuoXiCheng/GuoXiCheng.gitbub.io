const e=JSON.parse(`{"key":"v-22607e6b","path":"/design-pattern/structural/flyweight.html","title":"享元模式","lang":"zh-CN","frontmatter":{"description":"核心思想 享元模式允许共享多个对象的相同状态，来在有限的内存中载入更多的对象。 典型用例 网络连接池 在需要大量建立相似的网络连接（如数据库连接）的情况下，通过共享连接对象来减少创建和销毁连接的开销。 在这个例子中，连接池管理着一组预先创建的数据库连接对象。当需要一个连接时，从池中获取一个可用的连接；当完成使用时，将连接返回给池。这种方式可以显著减少频...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/design-pattern/structural/flyweight.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"享元模式"}],["meta",{"property":"og:description","content":"核心思想 享元模式允许共享多个对象的相同状态，来在有限的内存中载入更多的对象。 典型用例 网络连接池 在需要大量建立相似的网络连接（如数据库连接）的情况下，通过共享连接对象来减少创建和销毁连接的开销。 在这个例子中，连接池管理着一组预先创建的数据库连接对象。当需要一个连接时，从池中获取一个可用的连接；当完成使用时，将连接返回给池。这种方式可以显著减少频..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-28T06:21:47.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-28T06:21:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"享元模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-28T06:21:47.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"核心思想","slug":"核心思想","link":"#核心思想","children":[]},{"level":2,"title":"典型用例","slug":"典型用例","link":"#典型用例","children":[{"level":3,"title":"网络连接池","slug":"网络连接池","link":"#网络连接池","children":[]},{"level":3,"title":"字符和字符串处理","slug":"字符和字符串处理","link":"#字符和字符串处理","children":[]},{"level":3,"title":"图形和游戏开发中的对象共享","slug":"图形和游戏开发中的对象共享","link":"#图形和游戏开发中的对象共享","children":[]},{"level":3,"title":"用户界面组件","slug":"用户界面组件","link":"#用户界面组件","children":[]},{"level":3,"title":"粒子系统","slug":"粒子系统","link":"#粒子系统","children":[]}]}],"git":{"createdTime":1698977757000,"updatedTime":1701152507000},"readingTime":{"minutes":1.69,"words":507},"filePathRelative":"design-pattern/structural/flyweight.md","localizedDate":"2023年11月3日","autoDesc":true}`);export{e as data};
