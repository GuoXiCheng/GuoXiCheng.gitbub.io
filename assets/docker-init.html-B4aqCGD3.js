import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,a as d}from"./app-Bx_sDspg.js";const r={},s=d(`<h1 id="docker-初始化" tabindex="-1"><a class="header-anchor" href="#docker-初始化"><span>docker 初始化</span></a></h1><h2 id="docker-介绍" tabindex="-1"><a class="header-anchor" href="#docker-介绍"><span>docker 介绍</span></a></h2><p>docker 是一个开源的应用容器引擎，基于 go 语言并遵从 Apache2.0 协议开源。</p><p>docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口。几乎没有性能开销，可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架或包装系统。</p><h2 id="docker-安装" tabindex="-1"><a class="header-anchor" href="#docker-安装"><span>docker 安装</span></a></h2><h3 id="下载安装脚本" tabindex="-1"><a class="header-anchor" href="#下载安装脚本"><span>下载安装脚本</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://get.docker.com <span class="token parameter variable">-o</span> get-docker.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="执行安装脚本" tabindex="-1"><a class="header-anchor" href="#执行安装脚本"><span>执行安装脚本</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sh</span> get-docker.sh <span class="token parameter variable">--mirror</span> Aliyun
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="启动-docker-服务" tabindex="-1"><a class="header-anchor" href="#启动-docker-服务"><span>启动 docker 服务</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl daemon-reload
systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="验证-docker-是否安装成功" tabindex="-1"><a class="header-anchor" href="#验证-docker-是否安装成功"><span>验证 docker 是否安装成功</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="添加当前用户到-docker-用户组" tabindex="-1"><a class="header-anchor" href="#添加当前用户到-docker-用户组"><span>添加当前用户到 docker 用户组</span></a></h2><p>如果不想每次执行 docker 命令都需要加上 sudo，可以将当前用户添加到 docker 用户组。</p><h3 id="创建-docker-用户组" tabindex="-1"><a class="header-anchor" href="#创建-docker-用户组"><span>创建 docker 用户组</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="将当前用户添加到-docker-用户组" tabindex="-1"><a class="header-anchor" href="#将当前用户添加到-docker-用户组"><span>将当前用户添加到 docker 用户组</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token environment constant">$USER</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后退出当前终端，重新登录即可。</p><h3 id="检查是否添加成功" tabindex="-1"><a class="header-anchor" href="#检查是否添加成功"><span>检查是否添加成功</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="docker-常用命令" tabindex="-1"><a class="header-anchor" href="#docker-常用命令"><span>docker 常用命令</span></a></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker version</td><td>查看 docker 版本信息</td></tr><tr><td>docker info</td><td>查看 docker 系统信息</td></tr><tr><td>docker images</td><td>查看本地镜像列表</td></tr><tr><td>docker ps</td><td>查看运行中的容器列表</td></tr><tr><td>docker ps -a</td><td>查看所有容器列表</td></tr><tr><td>docker pull</td><td>拉取镜像</td></tr><tr><td>docker run --name=[image-name] -p [主机端口]:[容器端口] -d [image]:[tag]</td><td>运行容器</td></tr><tr><td>docker stop [image-id]</td><td>停止容器</td></tr><tr><td>docker start [image-id]</td><td>启动容器</td></tr><tr><td>docker rm [image-id]</td><td>删除容器</td></tr><tr><td>docker rmi [image-id]</td><td>删除镜像</td></tr><tr><td>docker logs</td><td>查看容器日志</td></tr><tr><td>docker cp</td><td>从容器中拷贝文件到本地</td></tr><tr><td>docker commit</td><td>提交容器副本</td></tr><tr><td>docker build</td><td>构建镜像</td></tr><tr><td>docker push</td><td>推送镜像</td></tr><tr><td>docker login</td><td>登录 docker</td></tr><tr><td>docker logout</td><td>退出 docker</td></tr><tr><td>docker tag</td><td>给镜像打标签</td></tr><tr><td>docker top</td><td>查看容器中运行的进程</td></tr><tr><td>docker stats</td><td>查看容器资源使用情况</td></tr><tr><td>docker exec -it [image-id] /bin/bash</td><td>在容器中执行命令</td></tr><tr><td>docker history</td><td>查看镜像历史</td></tr><tr><td>docker pause</td><td>暂停容器</td></tr><tr><td>docker unpause</td><td>恢复容器</td></tr></tbody></table><h2 id="批量清理无-tag-镜像" tabindex="-1"><a class="header-anchor" href="#批量清理无-tag-镜像"><span>批量清理无 tag 镜像</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> images <span class="token operator">|</span> <span class="token function">grep</span> none <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $3}&#39;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">docker</span> rmi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,27),n=[s];function c(o,i){return a(),t("div",null,n)}const h=e(r,[["render",c],["__file","docker-init.html.vue"]]),k=JSON.parse(`{"path":"/cloud-native/docker/docker-init.html","title":"docker 初始化","lang":"zh-CN","frontmatter":{"description":"docker 初始化 docker 介绍 docker 是一个开源的应用容器引擎，基于 go 语言并遵从 Apache2.0 协议开源。 docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口。几乎没有性能开销，可以很容...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/cloud-native/docker/docker-init.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"docker 初始化"}],["meta",{"property":"og:description","content":"docker 初始化 docker 介绍 docker 是一个开源的应用容器引擎，基于 go 语言并遵从 Apache2.0 协议开源。 docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口。几乎没有性能开销，可以很容..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T06:03:01.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T06:03:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker 初始化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-25T06:03:01.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"docker 介绍","slug":"docker-介绍","link":"#docker-介绍","children":[]},{"level":2,"title":"docker 安装","slug":"docker-安装","link":"#docker-安装","children":[{"level":3,"title":"下载安装脚本","slug":"下载安装脚本","link":"#下载安装脚本","children":[]},{"level":3,"title":"执行安装脚本","slug":"执行安装脚本","link":"#执行安装脚本","children":[]},{"level":3,"title":"启动 docker 服务","slug":"启动-docker-服务","link":"#启动-docker-服务","children":[]},{"level":3,"title":"验证 docker 是否安装成功","slug":"验证-docker-是否安装成功","link":"#验证-docker-是否安装成功","children":[]}]},{"level":2,"title":"添加当前用户到 docker 用户组","slug":"添加当前用户到-docker-用户组","link":"#添加当前用户到-docker-用户组","children":[{"level":3,"title":"创建 docker 用户组","slug":"创建-docker-用户组","link":"#创建-docker-用户组","children":[]},{"level":3,"title":"将当前用户添加到 docker 用户组","slug":"将当前用户添加到-docker-用户组","link":"#将当前用户添加到-docker-用户组","children":[]},{"level":3,"title":"检查是否添加成功","slug":"检查是否添加成功","link":"#检查是否添加成功","children":[]}]},{"level":2,"title":"docker 常用命令","slug":"docker-常用命令","link":"#docker-常用命令","children":[]},{"level":2,"title":"批量清理无 tag 镜像","slug":"批量清理无-tag-镜像","link":"#批量清理无-tag-镜像","children":[]}],"git":{"createdTime":1708840981000,"updatedTime":1708840981000},"readingTime":{"minutes":1.87,"words":560},"filePathRelative":"cloud-native/docker/docker-init.md","localizedDate":"2024年2月25日","autoDesc":true,"excerpt":"\\n<h2>docker 介绍</h2>\\n<p>docker 是一个开源的应用容器引擎，基于 go 语言并遵从 Apache2.0 协议开源。</p>\\n<p>docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>\\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口。几乎没有性能开销，可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架或包装系统。</p>\\n<h2>docker 安装</h2>\\n<h3>下载安装脚本</h3>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">curl</span> <span class=\\"token parameter variable\\">-fsSL</span> https://get.docker.com <span class=\\"token parameter variable\\">-o</span> get-docker.sh\\n</code></pre></div>"}`);export{h as comp,k as data};
