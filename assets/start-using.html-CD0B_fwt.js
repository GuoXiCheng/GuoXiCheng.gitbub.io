import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as r,c as d,d as i,w as a,a as p,e as n,b as s}from"./app-CxdspBVH.js";const k={},m=p(`<h1 id="开始使用" tabindex="-1"><a class="header-anchor" href="#开始使用"><span>开始使用</span></a></h1><h2 id="创建数据模型" tabindex="-1"><a class="header-anchor" href="#创建数据模型"><span>创建数据模型</span></a></h2><p>我们以一个简单的用户模型为例，创建一个 User 模型，用户有姓名、年龄和性别：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> BaseModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tiny-crud&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UserModel</span> <span class="token keyword">extends</span> <span class="token class-name">BaseModel</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">    gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>继承自 BaseModel 的数据模型会自动拥有 id、created_at、updated_at 和 created_by 四个字段，这四个字段的内容会从存储的对应数据中自动带出。</p></div><h2 id="创建数据存储库" tabindex="-1"><a class="header-anchor" href="#创建数据存储库"><span>创建数据存储库</span></a></h2><p>创建一个 UserRepository 继承自 GithubRepository，传入的泛型参数为上面定义的 UserModel。</p>`,7),v=s("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts","data-title":"ts"},[s("pre",{class:"language-typescript"},[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" GithubRepository "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},'"tiny-crud"'),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" githubRequest "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},'"./github-request"'),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"export"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"UserRepository"),n(),s("span",{class:"token keyword"},"extends"),n(),s("span",{class:"token class-name"},[n("GithubRepository"),s("span",{class:"token operator"},"<"),n("UserModel"),s("span",{class:"token operator"},">")]),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token function"},"constructor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"super"),s("span",{class:"token punctuation"},"("),n("githubRequest"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"Your Issue Number"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),b=s("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts","data-title":"ts"},[s("pre",{class:"language-typescript"},[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" GiteeRepository "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},'"tiny-crud"'),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" githubRequest "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},'"./github-request"'),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"export"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"UserRepository"),n(),s("span",{class:"token keyword"},"extends"),n(),s("span",{class:"token class-name"},[n("GiteeRepository"),s("span",{class:"token operator"},"<"),n("UserModel"),s("span",{class:"token operator"},">")]),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token function"},"constructor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"super"),s("span",{class:"token punctuation"},"("),n("githubRequest"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"Your Issue Number"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),h=s("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts","data-title":"ts"},[s("pre",{class:"language-typescript"},[s("code",null,[s("span",{class:"line"},[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" GitlabRepository "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},'"tiny-crud"'),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token keyword"},"export"),n(),s("span",{class:"token keyword"},"class"),n(),s("span",{class:"token class-name"},"UserRepository"),n(),s("span",{class:"token keyword"},"extends"),n(),s("span",{class:"token class-name"},[n("GitlabRepository"),s("span",{class:"token operator"},"<"),n("UserModel"),s("span",{class:"token operator"},">")]),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token function"},"constructor"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{")]),n(`
`),s("span",{class:"line"},[n("        "),s("span",{class:"token keyword"},"super"),s("span",{class:"token punctuation"},"("),n("GithubRequest"),s("span",{class:"token punctuation"},","),n(),s("span",{class:"token string"},'"Your Issue Number"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),n(`
`),s("span",{class:"line"},[n("    "),s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),g=p(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>UserRepository 构造器的第二个参数表示你当前存储库所对应的 issue 编号，如果你不传入这个参数，那么默认会使用你传入的第一个参数对象所携带的 issue 编号。</p></div><p>你可以使用常规的创建对象的手法来创建一个存储库对象，像这样：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">const</span> userRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你也可以使用 SingletonFactory 来创建一个单例对象：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> SingletonFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tiny-crud&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> userRepository <span class="token operator">=</span> SingletonFactory<span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span>UserRepository<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据存储库提供了一些基本的增删改查方法，当然你也可以自己进一步扩展，例如：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> GithubRepository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tiny-crud&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">GithubRepository<span class="token operator">&lt;</span>UserModel<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>GithubRequest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">async</span> <span class="token function">findByName</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>UserModel<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>name <span class="token operator">===</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="增删改查方法" tabindex="-1"><a class="header-anchor" href="#增删改查方法"><span>增删改查方法</span></a></h2><h3 id="detail" tabindex="-1"><a class="header-anchor" href="#detail"><span>detail</span></a></h3><p>查询当前存储库的详细信息</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">userRepository<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>返回结果参考如下：</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>number</td><td>Issue Id</td></tr><tr><td>issue_number</td><td>string</td><td>Issue 编号</td></tr><tr><td>comments</td><td>number</td><td>Issue 评论数</td></tr><tr><td>created_at</td><td>string</td><td>Issue 创建时间</td></tr><tr><td>updated_at</td><td>string</td><td>Issue 更新时间</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>对于 Github 或 Gitlab，comments 字段显示的是实际数量，对于 Gitee，comments 字段显示的是累计的数量。</p><p>例如：新增 10 笔数据后再全部删除，对于 Github 或 Gitlab，comments 字段显示的是 0，对于 Gitee，comments 字段显示的是 10。</p></div><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create"><span>create</span></a></h3><p>创建一笔数据</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">userRepository<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    gender<span class="token operator">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createall" tabindex="-1"><a class="header-anchor" href="#createall"><span>createAll</span></a></h3><p>创建多笔数据</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">userRepository<span class="token punctuation">.</span><span class="token function">createAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">        gender<span class="token operator">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        name<span class="token operator">:</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span></span>
<span class="line">        gender<span class="token operator">:</span> <span class="token string">&quot;female&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="find" tabindex="-1"><a class="header-anchor" href="#find"><span>find</span></a></h3><p>查询所有数据</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">userRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>find 方法支持传入一个或多个查询参数，例如：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">userRepository</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        since<span class="token operator">:</span> <span class="token string">&quot;2021-01-01T00:00:00Z&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        per_page<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">        page<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>find 方法支持的查询参数会依据不同的存储平台而有所不同：</p>`,26),y=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"字段名"),s("th",null,"类型"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"since"),s("td",null,"string"),s("td",null,[n("只返回在给定时间之后更新的数据，时间格式为 ISO 8601 格式 "),s("code",null,"YYYY-MM-DDTHH:MM:SSZ")])]),s("tr",null,[s("td",null,"page"),s("td",null,"number"),s("td",null,"返回第几页的数据，默认为 1")]),s("tr",null,[s("td",null,"per_page"),s("td",null,"number"),s("td",null,"每页返回的数据条数，默认为 30，最大为 100")])])],-1),f=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"字段名"),s("th",null,"类型"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"sort"),s("td",null,"string"),s("td",null,"排序顺序:asc，desc（默认）")]),s("tr",null,[s("td",null,"order_by"),s("td",null,"string"),s("td",null,"返回按 created_at 或 updated_at 字段排序的数据，默认为 created_at")])])],-1),_=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"字段名"),s("th",null,"类型"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"since"),s("td",null,"string"),s("td",null,[n("只返回在给定时间之后更新的数据，时间格式为 ISO 8601 格式 "),s("code",null,"YYYY-MM-DDTHH:MM:SSZ")])]),s("tr",null,[s("td",null,"page"),s("td",null,"number"),s("td",null,"当前的页码")]),s("tr",null,[s("td",null,"per_page"),s("td",null,"number"),s("td",null,"每页的数量，默认为 20，最大为 100")]),s("tr",null,[s("td",null,"order"),s("td",null,"string"),s("td",null,"排序顺序: asc（默认），desc")])])],-1),w=p(`<h3 id="findbyid" tabindex="-1"><a class="header-anchor" href="#findbyid"><span>findById</span></a></h3><p>根据 id 查询一笔数据</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="updatebyid" tabindex="-1"><a class="header-anchor" href="#updatebyid"><span>updateById</span></a></h3><p>根据 id 更新一笔数据</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">userRepository<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span></span>
<span class="line">    gender<span class="token operator">:</span> <span class="token string">&quot;female&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deletebyid" tabindex="-1"><a class="header-anchor" href="#deletebyid"><span>deleteById</span></a></h3><p>根据 id 删除一笔数据</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="deleteall" tabindex="-1"><a class="header-anchor" href="#deleteall"><span>deleteAll</span></a></h3><div class="hint-container caution"><p class="hint-container-title">警告</p><p>deleteAll 方法会删除当前存储库中所有数据，此操作不可逆，请谨慎使用。</p></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">userRepository<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,12);function x(R,q){const c=l("CodeTabs"),o=l("Tabs");return r(),d("div",null,[m,i(c,{id:"22",data:[{id:"github"},{id:"gitee"},{id:"gitlab"}]},{title0:a(({value:e,isActive:t})=>[n("github")]),title1:a(({value:e,isActive:t})=>[n("gitee")]),title2:a(({value:e,isActive:t})=>[n("gitlab")]),tab0:a(({value:e,isActive:t})=>[v]),tab1:a(({value:e,isActive:t})=>[b]),tab2:a(({value:e,isActive:t})=>[h]),_:1}),g,i(o,{id:"173",data:[{id:"github"},{id:"gitlab"},{id:"gitee"}]},{title0:a(({value:e,isActive:t})=>[n("github")]),title1:a(({value:e,isActive:t})=>[n("gitlab")]),title2:a(({value:e,isActive:t})=>[n("gitee")]),tab0:a(({value:e,isActive:t})=>[y]),tab1:a(({value:e,isActive:t})=>[f]),tab2:a(({value:e,isActive:t})=>[_]),_:1}),w])}const j=u(k,[["render",x],["__file","start-using.html.vue"]]),I=JSON.parse(`{"path":"/dump/projects/TinyCRUD-Docs/start-using.html","title":"开始使用","lang":"zh-CN","frontmatter":{"index":true,"order":2,"description":"开始使用 创建数据模型 我们以一个简单的用户模型为例，创建一个 User 模型，用户有姓名、年龄和性别： 提示 继承自 BaseModel 的数据模型会自动拥有 id、created_at、updated_at 和 created_by 四个字段，这四个字段的内容会从存储的对应数据中自动带出。 创建数据存储库 创建一个 UserRepository 继...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/dump/projects/TinyCRUD-Docs/start-using.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"开始使用"}],["meta",{"property":"og:description","content":"开始使用 创建数据模型 我们以一个简单的用户模型为例，创建一个 User 模型，用户有姓名、年龄和性别： 提示 继承自 BaseModel 的数据模型会自动拥有 id、created_at、updated_at 和 created_by 四个字段，这四个字段的内容会从存储的对应数据中自动带出。 创建数据存储库 创建一个 UserRepository 继..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-13T07:17:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-13T07:17:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"开始使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-13T07:17:20.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"创建数据模型","slug":"创建数据模型","link":"#创建数据模型","children":[]},{"level":2,"title":"创建数据存储库","slug":"创建数据存储库","link":"#创建数据存储库","children":[]},{"level":2,"title":"增删改查方法","slug":"增删改查方法","link":"#增删改查方法","children":[{"level":3,"title":"detail","slug":"detail","link":"#detail","children":[]},{"level":3,"title":"create","slug":"create","link":"#create","children":[]},{"level":3,"title":"createAll","slug":"createall","link":"#createall","children":[]},{"level":3,"title":"find","slug":"find","link":"#find","children":[]},{"level":3,"title":"findById","slug":"findbyid","link":"#findbyid","children":[]},{"level":3,"title":"updateById","slug":"updatebyid","link":"#updatebyid","children":[]},{"level":3,"title":"deleteById","slug":"deletebyid","link":"#deletebyid","children":[]},{"level":3,"title":"deleteAll","slug":"deleteall","link":"#deleteall","children":[]}]}],"git":{"createdTime":1704869871000,"updatedTime":1718263040000},"readingTime":{"minutes":3.02,"words":906},"filePathRelative":"dump/projects/TinyCRUD-Docs/start-using.md","localizedDate":"2024年1月10日","autoDesc":true,"excerpt":"\\n<h2>创建数据模型</h2>\\n<p>我们以一个简单的用户模型为例，创建一个 User 模型，用户有姓名、年龄和性别：</p>\\n<div class=\\"language-typescript\\" data-highlighter=\\"prismjs\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> BaseModel <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"tiny-crud\\"</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">UserModel</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">BaseModel</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    age<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    gender<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div>"}`);export{j as comp,I as data};
