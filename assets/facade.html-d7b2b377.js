const e=JSON.parse(`{"key":"v-09e1ee42","path":"/design-pattern/structural/facade.html","title":"外观模式","lang":"zh-CN","frontmatter":{"description":"核心思想 外观模式提供了一个统一的接口来访问子系统中的一组接口。 典型用例 整合微服务接口 在微服务架构中，外观模式可以用来提供一个统一的接口来整合多个微服务，使得客户端不需要与每个服务单独交互。 在这个例子中，外观服务类提供了一个统一的接口来访问多个微服务接口。客户端代码通过与外观类来交互，而不是直接与每个微服务交互。 简化复杂子系统的访问 当子系统...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/design-pattern/structural/facade.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"外观模式"}],["meta",{"property":"og:description","content":"核心思想 外观模式提供了一个统一的接口来访问子系统中的一组接口。 典型用例 整合微服务接口 在微服务架构中，外观模式可以用来提供一个统一的接口来整合多个微服务，使得客户端不需要与每个服务单独交互。 在这个例子中，外观服务类提供了一个统一的接口来访问多个微服务接口。客户端代码通过与外观类来交互，而不是直接与每个微服务交互。 简化复杂子系统的访问 当子系统..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-28T06:21:47.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-28T06:21:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"外观模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-28T06:21:47.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"核心思想","slug":"核心思想","link":"#核心思想","children":[]},{"level":2,"title":"典型用例","slug":"典型用例","link":"#典型用例","children":[{"level":3,"title":"整合微服务接口","slug":"整合微服务接口","link":"#整合微服务接口","children":[]},{"level":3,"title":"封装客户端和子系统的交互","slug":"封装客户端和子系统的交互","link":"#封装客户端和子系统的交互","children":[]},{"level":3,"title":"提供子系统的抽象层","slug":"提供子系统的抽象层","link":"#提供子系统的抽象层","children":[]},{"level":3,"title":"分层结构中的接口","slug":"分层结构中的接口","link":"#分层结构中的接口","children":[]}]}],"git":{"createdTime":1699079305000,"updatedTime":1701152507000},"readingTime":{"minutes":1.74,"words":521},"filePathRelative":"design-pattern/structural/facade.md","localizedDate":"2023年11月4日","autoDesc":true}`);export{e as data};
