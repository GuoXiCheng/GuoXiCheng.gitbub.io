const e=JSON.parse(`{"key":"v-7cab1b72","path":"/design-pattern/creational/prototype.html","title":"原型模式","lang":"zh-CN","frontmatter":{"order":4,"description":"核心思想 原型模式允许通过复制已有实例来生成新实例，而无需依赖其所属的类。 典型用例 状态复制 使用原型模式可以有效地进行状态复制，尤其是在实现撤销/重做功能或需要保存和恢复对象状态的场景中。通过原型模式，可以轻松地保存对象的当前状态，并在需要时恢复这些状态。 通过使用克隆方法，可以在任何时候保存对象的当前状态，并在以后需要时恢复这些状态。 通过原型模...","head":[["meta",{"property":"og:url","content":"https://guoxicheng.top/design-pattern/creational/prototype.html"}],["meta",{"property":"og:site_name","content":"Guo's Page"}],["meta",{"property":"og:title","content":"原型模式"}],["meta",{"property":"og:description","content":"核心思想 原型模式允许通过复制已有实例来生成新实例，而无需依赖其所属的类。 典型用例 状态复制 使用原型模式可以有效地进行状态复制，尤其是在实现撤销/重做功能或需要保存和恢复对象状态的场景中。通过原型模式，可以轻松地保存对象的当前状态，并在需要时恢复这些状态。 通过使用克隆方法，可以在任何时候保存对象的当前状态，并在以后需要时恢复这些状态。 通过原型模..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-23T03:44:35.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-23T03:44:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-23T03:44:35.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"核心思想","slug":"核心思想","link":"#核心思想","children":[]},{"level":2,"title":"典型用例","slug":"典型用例","link":"#典型用例","children":[{"level":3,"title":"状态复制","slug":"状态复制","link":"#状态复制","children":[]},{"level":3,"title":"复制复杂对象","slug":"复制复杂对象","link":"#复制复杂对象","children":[]},{"level":3,"title":"避免子类过多","slug":"避免子类过多","link":"#避免子类过多","children":[]},{"level":3,"title":"动态加载或生成对象","slug":"动态加载或生成对象","link":"#动态加载或生成对象","children":[]},{"level":3,"title":"初始化复杂对象","slug":"初始化复杂对象","link":"#初始化复杂对象","children":[]}]}],"git":{"createdTime":1698909968000,"updatedTime":1700711075000},"readingTime":{"minutes":2.68,"words":803},"filePathRelative":"design-pattern/creational/prototype.md","localizedDate":"2023年11月2日","autoDesc":true}`);export{e as data};
